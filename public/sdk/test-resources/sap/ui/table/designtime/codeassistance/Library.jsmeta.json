{"!define":{"sap.ui.table.AnalyticalTable_obj":{"extend":{"!description":"Creates a new subclass of class sap.ui.table.AnalyticalTable with name <code>sClassName<\/code>\nand enriches it with the information contained in <code>oClassInfo<\/code>.\n\n<code>oClassInfo<\/code> might contain the same kind of information as described in {@link sap.ui.table.Table.extend}.","!type":"fn(sClassName: String, oClassInfo?: Object, FNMetaImpl?: fn()) -> fn()","!category":"function","!static":true},"!type":"fn(sId: String, mSettings: Object)","prototype":"sap.ui.table.AnalyticalTable"},"sap.ui.table.TablePersoController_obj":{"extend":{"!description":"Creates a new subclass of class sap.ui.table.TablePersoController with name <code>sClassName<\/code>\nand enriches it with the information contained in <code>oClassInfo<\/code>.\n\n<code>oClassInfo<\/code> might contain the same kind of information as described in {@link sap.ui.base.ManagedObject.extend}.","!type":"fn(sClassName: String, oClassInfo?: Object, FNMetaImpl?: fn()) -> fn()","!category":"function","!static":true},"!type":"fn(sId: String, mSettings: Object)","prototype":"sap.ui.table.TablePersoController"},"sap.ui.table.TreeAutoExpandMode":{"Bundled":{"!description":"If supported by a backend provider with analytical capabilities, the requests needed for an automatic node expansion are bundled.","!type":"String","!category":"enum"},"!description":"Different modes for setting the auto expand mode on different tables (Analytical-, TreeTable, ...)","!category":"namespace","!module":"sap/ui/table/TreeAutoExpandMode","Sequential":{"!description":"Tree nodes will be expanded in sequence, level by level (Single requests are sent)","!type":"String","!category":"enum"}},"sap.ui.table.GroupEventType":{"ungroupAll":{"!description":"Ungroup All Columns","!type":"String","!category":"enum"},"showGroupedColumn":{"!description":"Show grouped column also as a column, not just as group header","!type":"String","!category":"enum"},"!description":"Details about the group event to distinguish between different actions associated with grouping","moveDown":{"!description":"Change the group order of the columns. Move column one position down in the group sequence","!type":"String","!category":"enum"},"!category":"static class","ungroup":{"!description":"Ungroup Column","!type":"String","!category":"enum"},"moveUp":{"!description":"Change the group order of the columns. Move column one position up in the group sequence","!type":"String","!category":"enum"},"hideGroupedColumn":{"!description":"Show grouped column only as group header","!type":"String","!category":"enum"},"group":{"!description":"Group Column","!type":"String","!category":"enum"},"!module":"sap/ui/table/library"},"sap.ui.table.Column":{"setDefaultFilterOperator":{"!description":"Sets a new value for property <code>defaultFilterOperator<\/code>.\n\nIf this property is set, the default filter operator of the column is overridden.\nBy default <code>Contains<\/code> is used for string and <code>EQ<\/code> for other types. A valid <code>sap.ui.model.FilterOperator<\/code> needs to be passed.\n\nWhen called with a value of <code>null<\/code> or <code>undefined<\/code>, the default value of the property will be restored.","!type":"fn(sDefaultFilterOperator: String) -> sap.ui.table.Column","!category":"function","!static":false},"toggleSort":{"!description":"<strong style=\"color: red;\">Deprecated! <\/strong>Since 1.5.1 Please use the function \"sap.ui.Table.prototype.sort\".<br>Toggles the sort order of the column.","!type":"fn() -> sap.ui.table.Column","!category":"function","!static":false},"getFilterType":{"!description":"Gets current value of property <code>filterType<\/code>.\n\nType of Filter. This is used to transform the search term to the specified type,\nto make sure that the right columns are displayed. This should be the same as defined\nin binding for this column. As an alternative you can pass a function which does the conversion.\nThe function receives the entered filter value as parameter and returns the proper\nvalue for the filter expression. Another option is to pass the class name of the type,\ne.g.: <code>sap.ui.model.type.Date<\/code> or an expression similar to the binding syntax,\ne.g.: <code>\"\\{type: 'sap.ui.model.type.Date', formatOptions: \\{UTC: true\\}, constraints: {} \\}\"<\/code>.\nHere the escaping is mandatory to avoid handling by the binding parser.\nBy default the filter type is <code>sap.ui.model.type.String<\/code>.","!type":"fn() -> Object","!category":"function","!static":false},"removeMultiLabel":{"!description":"Removes a multiLabel from the aggregation <code>multiLabels<\/code>.","!type":"fn(vMultiLabel: Number | String | sap.ui.core.Control) -> sap.ui.core.Control","!category":"function","!static":false},"destroyMultiLabels":{"!description":"Destroys all the multiLabels in the aggregation <code>multiLabels<\/code>.","!type":"fn() -> sap.ui.table.Column","!category":"function","!static":false},"getShowSortMenuEntry":{"!description":"Gets current value of property <code>showSortMenuEntry<\/code>.\n\nDefines if the sort menu entries are displayed\n\nDefault value is <code>true<\/code>.","!type":"fn() -> Boolean","!category":"function","!static":false},"!module":"sap/ui/table/Column","getResizable":{"!description":"Gets current value of property <code>resizable<\/code>.\n\nIf set to true, the column can be resized either using the resize-handle (by mouse) or using\nthe keyboard (SHIFT + Left/Right Arrow keys)\n\nDefault value is <code>true<\/code>.","!type":"fn() -> Boolean","!category":"function","!static":false},"setShowSortMenuEntry":{"!description":"Sets a new value for property <code>showSortMenuEntry<\/code>.\n\nDefines if the sort menu entries are displayed\n\nWhen called with a value of <code>null<\/code> or <code>undefined<\/code>, the default value of the property will be restored.\n\nDefault value is <code>true<\/code>.","!type":"fn(bShowSortMenuEntry: Boolean) -> sap.ui.table.Column","!category":"function","!static":false},"getGrouped":{"!description":"Gets current value of property <code>grouped<\/code>.\n\nIndicates if the column is grouped.\n\nDefault value is <code>false<\/code>.","!type":"fn() -> Boolean","!category":"function","!static":false},"getSortOrder":{"!description":"Gets current value of property <code>sortOrder<\/code>.\n\nThis property indicates the sort direction (Ascending or Descending). The corresponding icon will be\nrendered if the property <code>sorted<\/code> is <code>true<\/code>\n\nDefault value is <code>Ascending<\/code>.","!type":"fn() -> sap.ui.table.SortOrder","!category":"function","!static":false},"setFiltered":{"!description":"Sets a new value for property <code>filtered<\/code>.\n\nIndicates if the column is filtered. This property only controls if a filter indicator is displayed in the\ncolumn header - it does not trigger the filter function. The column has to be filtered by calling <code>Column.sort()<\/code>\n\nWhen called with a value of <code>null<\/code> or <code>undefined<\/code>, the default value of the property will be restored.\n\nDefault value is <code>false<\/code>.","!type":"fn(bFiltered: Boolean) -> sap.ui.table.Column","!category":"function","!static":false},"getWidth":{"!description":"Gets current value of property <code>width<\/code>.\n\nWidth of the column. Works only with px/em/rem values. Em are handled like rem values.","!type":"fn() -> sap.ui.core.CSSSize","!category":"function","!static":false},"getFlexible":{"!description":"Gets current value of property <code>flexible<\/code>.\n\nIf the table is wider than the sum of widths of the visible columns, the columns will be\nresized proportionally to their widths that were set originally. If set to false, the column will be displayed in the\noriginal width. If all columns are set to not be flexible, an extra \"dummy\" column will be\ncreated at the end of the table.\n\nDefault value is <code>true<\/code>.","!type":"fn() -> Boolean","!category":"function","!static":false},"setFilterType":{"!description":"Sets a new value for property <code>filterType<\/code>.\n\nType of Filter. This is used to transform the search term to the specified type,\nto make sure that the right columns are displayed. This should be the same as defined\nin binding for this column. As an alternative you can pass a function which does the conversion.\nThe function receives the entered filter value as parameter and returns the proper\nvalue for the filter expression. Another option is to pass the class name of the type,\ne.g.: <code>sap.ui.model.type.Date<\/code> or an expression similar to the binding syntax,\ne.g.: <code>\"\\{type: 'sap.ui.model.type.Date', formatOptions: \\{UTC: true\\}, constraints: {} \\}\"<\/code>.\nHere the escaping is mandatory to avoid handling by the binding parser.\nBy default the filter type is <code>sap.ui.model.type.String<\/code>.\n\nWhen called with a value of <code>null<\/code> or <code>undefined<\/code>, the default value of the property will be restored.","!type":"fn(oFilterType: Object) -> sap.ui.table.Column","!category":"function","!static":false},"setHAlign":{"!description":"Sets a new value for property <code>hAlign<\/code>.\n\nHorizontal alignment of the column content. Controls with a text align do not inherit\nthe horizontal alignment. You have to set the text align directly on the template.\n\nWhen called with a value of <code>null<\/code> or <code>undefined<\/code>, the default value of the property will be restored.\n\nDefault value is <code>Begin<\/code>.","!type":"fn(sHAlign: sap.ui.core.HorizontalAlign) -> sap.ui.table.Column","!category":"function","!static":false},"detachColumnMenuOpen":{"!description":"Detaches event handler <code>fnFunction<\/code> from the <code>columnMenuOpen<\/code> event of this <code>sap.ui.table.Column<\/code>.\n\nThe passed function and listener object must match the ones used for event registration.","!type":"fn(fnFunction: fn(), oListener: Object) -> sap.ui.table.Column","!category":"function","!static":false},"shouldRender":{"!description":"Returns whether the column should be rendered or not.","!type":"fn() -> Boolean","!category":"function","!static":false},"getFiltered":{"!description":"Gets current value of property <code>filtered<\/code>.\n\nIndicates if the column is filtered. This property only controls if a filter indicator is displayed in the\ncolumn header - it does not trigger the filter function. The column has to be filtered by calling <code>Column.sort()<\/code>\n\nDefault value is <code>false<\/code>.","!type":"fn() -> Boolean","!category":"function","!static":false},"!constructorDescription":"Constructor for a new Column.\n\n\nAccepts an object literal <code>mSettings<\/code> that defines initial\nproperty values, aggregated and associated objects as well as event handlers.\nSee {@link sap.ui.base.ManagedObject#constructor} for a general description of the syntax of the settings object.\n\nThe supported settings are:\n<ul>\n<li>Properties\n<ul>\n<li>{@link #getWidth width} : sap.ui.core.CSSSize<\/li>\n<li>{@link #getFlexible flexible} : boolean (default: true)<\/li>\n<li>{@link #getResizable resizable} : boolean (default: true)<\/li>\n<li>{@link #getHAlign hAlign} : sap.ui.core.HorizontalAlign (default: Begin)<\/li>\n<li>{@link #getSorted sorted} : boolean (default: false)<\/li>\n<li>{@link #getSortOrder sortOrder} : sap.ui.table.SortOrder (default: Ascending)<\/li>\n<li>{@link #getSortProperty sortProperty} : string<\/li>\n<li>{@link #getFiltered filtered} : boolean (default: false)<\/li>\n<li>{@link #getFilterProperty filterProperty} : string<\/li>\n<li>{@link #getFilterValue filterValue} : string<\/li>\n<li>{@link #getFilterOperator filterOperator} : string<\/li>\n<li>{@link #getDefaultFilterOperator defaultFilterOperator} : string<\/li>\n<li>{@link #getFilterType filterType} : any<\/li>\n<li>{@link #getGrouped grouped} : boolean (default: false)<\/li>\n<li>{@link #getVisible visible} : boolean (default: true)<\/li>\n<li>{@link #getName name} : string<\/li>\n<li>{@link #getShowFilterMenuEntry showFilterMenuEntry} : boolean (default: true)<\/li>\n<li>{@link #getShowSortMenuEntry showSortMenuEntry} : boolean (default: true)<\/li>\n<li>{@link #getHeaderSpan headerSpan} : any (default: 1)<\/li>\n<li>{@link #getAutoResizable autoResizable} : boolean (default: false)<\/li>\n<\/ul>\n<\/li>\n<li>Aggregations\n<ul>\n<li>{@link #getLabel label} : sap.ui.core.Control|string (default)<\/li>\n<li>{@link #getMultiLabels multiLabels} : sap.ui.core.Control[]<\/li>\n<li>{@link #getTemplate template} : sap.ui.core.Control<\/li>\n<li>{@link #getMenu menu} : sap.ui.unified.Menu<\/li>\n<\/ul>\n<\/li>\n<li>Events\n<ul>\n<li>{@link #event:columnMenuOpen columnMenuOpen} : fnListenerFunction or [fnListenerFunction, oListenerObject] or [oData, fnListenerFunction, oListenerObject]<\/li>\n<\/ul>\n<\/li>\n<\/ul>\n\nIn addition, all settings applicable to the base type {@link sap.ui.core.Element#constructor sap.ui.core.Element}\ncan be used as well.","indexOfMultiLabel":{"!description":"Checks for the provided <code>sap.ui.core.Control<\/code> in the aggregation <code>multiLabels<\/code>.\nand returns its index if found or -1 otherwise.","!type":"fn(oMultiLabel: sap.ui.core.Control) -> Number","!category":"function","!static":false},"getHeaderSpan":{"!description":"Gets current value of property <code>headerSpan<\/code>.\n\nIf this property is set, a span is applied for the header. When moving columns, all columns\nwhich are part of the header will be moved. The <code>headerSpan<\/code> can be either an integer or an array of\nintegers (if you use the multi header feature of the table). If you only specify an integer, this span is\napplied for all header rows, with multiple integers you can specify a separate span for each header row.\n\nDefault value is <code>1<\/code>.","!type":"fn() -> Object","!category":"function","!static":false},"setShowFilterMenuEntry":{"!description":"Sets a new value for property <code>showFilterMenuEntry<\/code>.\n\nDefines if the filter menu entry is displayed\n\nWhen called with a value of <code>null<\/code> or <code>undefined<\/code>, the default value of the property will be restored.\n\nDefault value is <code>true<\/code>.","!type":"fn(bShowFilterMenuEntry: Boolean) -> sap.ui.table.Column","!category":"function","!static":false},"getVisible":{"!description":"Gets current value of property <code>visible<\/code>.\n\nInvisible controls are not rendered.\n\nDefault value is <code>true<\/code>.","!type":"fn() -> Boolean","!category":"function","!static":false},"setFilterValue":{"!description":"Sets a new value for property <code>filterValue<\/code>.\n\nSpecifies the value of the filter as string (will be converted into the proper data type). It is possible\nto provide a filterOperator as string, as shown here:\n<pre>\n&gt; 50\n&lt; 100\n&gt;= 150\n&lt;= 200\n= 250\n!= 300\nsomething    ends with\nsomething*    starts with\nsomething*   contains\nsome..thing   between\n50..100       between\n<\/pre>\n\nWhen called with a value of <code>null<\/code> or <code>undefined<\/code>, the default value of the property will be restored.","!type":"fn(sFilterValue: String) -> sap.ui.table.Column","!category":"function","!static":false},"setSortOrder":{"!description":"Sets a new value for property <code>sortOrder<\/code>.\n\nThis property indicates the sort direction (Ascending or Descending). The corresponding icon will be\nrendered if the property <code>sorted<\/code> is <code>true<\/code>\n\nWhen called with a value of <code>null<\/code> or <code>undefined<\/code>, the default value of the property will be restored.\n\nDefault value is <code>Ascending<\/code>.","!type":"fn(sSortOrder: sap.ui.table.SortOrder) -> sap.ui.table.Column","!category":"function","!static":false},"setTemplate":{"!description":"Sets the aggregated <code>template<\/code>.","!type":"fn(oTemplate: sap.ui.core.Control) -> sap.ui.table.Column","!category":"function","!static":false},"setName":{"!description":"Sets a new value for property <code>name<\/code>.\n\nThe name of the column which is used in the column visibility menu item as text.\nIf not set as a fallback the column menu tries to get the text from the nested Label.\n\nWhen called with a value of <code>null<\/code> or <code>undefined<\/code>, the default value of the property will be restored.","!type":"fn(sName: String) -> sap.ui.table.Column","!category":"function","!static":false},"setHeaderSpan":{"!description":"Sets a new value for property <code>headerSpan<\/code>.\n\nIf this property is set, a span is applied for the header. When moving columns, all columns\nwhich are part of the header will be moved. The <code>headerSpan<\/code> can be either an integer or an array of\nintegers (if you use the multi header feature of the table). If you only specify an integer, this span is\napplied for all header rows, with multiple integers you can specify a separate span for each header row.\n\nWhen called with a value of <code>null<\/code> or <code>undefined<\/code>, the default value of the property will be restored.\n\nDefault value is <code>1<\/code>.","!type":"fn(oHeaderSpan: Object) -> sap.ui.table.Column","!category":"function","!static":false},"getHAlign":{"!description":"Gets current value of property <code>hAlign<\/code>.\n\nHorizontal alignment of the column content. Controls with a text align do not inherit\nthe horizontal alignment. You have to set the text align directly on the template.\n\nDefault value is <code>Begin<\/code>.","!type":"fn() -> sap.ui.core.HorizontalAlign","!category":"function","!static":false},"!proto":"sap.ui.core.Element","getSortProperty":{"!description":"Gets current value of property <code>sortProperty<\/code>.\n\nSpecifies the binding property on which the column will sort.\nSince the column template may have composite bindings, it's not possible to figure out on which binding\nproperty the sort shall be applied. Therefore the binding property for sorting must be specified.\nFor example, if the first name and last name are displayed in the same column, only one of the two can be defined as\n<code>sortProperty<\/code>.\n\nA column menu entry for sorting can only be generated if the <code>sortProperty<\/code> is set.","!type":"fn() -> String","!category":"function","!static":false},"sort":{"!description":"<strong style=\"color: red;\">Deprecated! <\/strong>Since 1.5.1 Please use the function \"sap.ui.Table.prototype.sort\".<br>sorts the current column ascending or descending","!type":"fn(bDescending: Boolean) -> sap.ui.table.Column","!category":"function","!static":false},"setSorted":{"!description":"Sets a new value for property <code>sorted<\/code>.\n\nIndicates if the column is sorted. This property only controls if a sort indicator is displayed in the\ncolumn header - it does not trigger the sort function. The column has to be sorted by calling <code>Column.sort()<\/code>\n\nWhen called with a value of <code>null<\/code> or <code>undefined<\/code>, the default value of the property will be restored.\n\nDefault value is <code>false<\/code>.","!type":"fn(bSorted: Boolean) -> sap.ui.table.Column","!category":"function","!static":false},"setLabel":{"!description":"Sets the aggregated <code>label<\/code>.","!type":"fn(vLabel: sap.ui.core.Control | String) -> sap.ui.table.Column","!category":"function","!static":false},"insertMultiLabel":{"!description":"Inserts a multiLabel into the aggregation <code>multiLabels<\/code>.","!type":"fn(oMultiLabel: sap.ui.core.Control, iIndex: Number) -> sap.ui.table.Column","!category":"function","!static":false},"destroyLabel":{"!description":"Destroys the label in the aggregation <code>label<\/code>.","!type":"fn() -> sap.ui.table.Column","!category":"function","!static":false},"getFilterValue":{"!description":"Gets current value of property <code>filterValue<\/code>.\n\nSpecifies the value of the filter as string (will be converted into the proper data type). It is possible\nto provide a filterOperator as string, as shown here:\n<pre>\n&gt; 50\n&lt; 100\n&gt;= 150\n&lt;= 200\n= 250\n!= 300\nsomething    ends with\nsomething*    starts with\nsomething*   contains\nsome..thing   between\n50..100       between\n<\/pre>","!type":"fn() -> String","!category":"function","!static":false},"fireColumnMenuOpen":{"!description":"Fires event <code>columnMenuOpen<\/code> to attached listeners.\n\nListeners may prevent the default action of this event by using the <code>preventDefault<\/code>-method on the event object.\n\nExpects the following event parameters:\n<ul>\n<li><code>menu<\/code> of type <code>sap.ui.unified.Menu<\/code>Refence to the selected <code>menu<\/code> instance to be opened.<\/li>\n<\/ul>","!type":"fn(mArguments?: Map) -> Boolean","!category":"function","!static":false},"destroyMenu":{"!description":"Destroys the menu in the aggregation <code>menu<\/code>.","!type":"fn() -> sap.ui.table.Column","!category":"function","!static":false},"getDefaultFilterOperator":{"!description":"Gets current value of property <code>defaultFilterOperator<\/code>.\n\nIf this property is set, the default filter operator of the column is overridden.\nBy default <code>Contains<\/code> is used for string and <code>EQ<\/code> for other types. A valid <code>sap.ui.model.FilterOperator<\/code> needs to be passed.","!type":"fn() -> String","!category":"function","!static":false},"getFilterProperty":{"!description":"Gets current value of property <code>filterProperty<\/code>.\n\nSpecifies the binding property on which the column shall be filtered.\nSince the column template may have composite bindings, it's not possible to figure out on which binding\nproperty the filter shall be applied. Therefore the binding property for filtering must be specified.\nFor example, if the first name and last name are displayed in the same column, only one of the two can be defined as\n<code>filterProperty<\/code>.\n\nA column menu entry for filtering can only be generated if the <code>filterProperty<\/code> is set. The\ndefault menu entry is a text input field.","!type":"fn() -> String","!category":"function","!static":false},"!category":"class","setWidth":{"!description":"Sets a new value for property <code>width<\/code>.\n\nWidth of the column. Works only with px/em/rem values. Em are handled like rem values.\n\nWhen called with a value of <code>null<\/code> or <code>undefined<\/code>, the default value of the property will be restored.","!type":"fn(sWidth: sap.ui.core.CSSSize) -> sap.ui.table.Column","!category":"function","!static":false},"getMultiLabels":{"!description":"Gets content of aggregation <code>multiLabels<\/code>.\n\nLabels of the column which are displayed in the column header. Define a control for\neach header row in the table. Use this aggregation if you want to use multiple headers per column.","!type":"fn() -> [sap.ui.core.Control]","!category":"function","!static":false},"getSorted":{"!description":"Gets current value of property <code>sorted<\/code>.\n\nIndicates if the column is sorted. This property only controls if a sort indicator is displayed in the\ncolumn header - it does not trigger the sort function. The column has to be sorted by calling <code>Column.sort()<\/code>\n\nDefault value is <code>false<\/code>.","!type":"fn() -> Boolean","!category":"function","!static":false},"getTemplate":{"!description":"Gets content of aggregation <code>template<\/code>.\n\nTemplate (cell renderer) of this column. A template is decoupled from the column, which means after\nchanging the templates' properties or aggregations an explicit invalidation of the column or table is\nrequired. The default depends on the loaded libraries.","!type":"fn() -> sap.ui.core.Control","!category":"function","!static":false},"destroyTemplate":{"!description":"Destroys the template in the aggregation <code>template<\/code>.","!type":"fn() -> sap.ui.table.Column","!category":"function","!static":false},"extend":{"!description":"Creates a new subclass of class sap.ui.table.Column with name <code>sClassName<\/code>\nand enriches it with the information contained in <code>oClassInfo<\/code>.\n\n<code>oClassInfo<\/code> might contain the same kind of information as described in {@link sap.ui.core.Element.extend}.","!type":"fn(sClassName: String, oClassInfo?: Object, FNMetaImpl?: fn()) -> fn()","!category":"function","!static":true},"setGrouped":{"!description":"Sets a new value for property <code>grouped<\/code>.\n\nIndicates if the column is grouped.\n\nWhen called with a value of <code>null<\/code> or <code>undefined<\/code>, the default value of the property will be restored.\n\nDefault value is <code>false<\/code>.","!type":"fn(bGrouped: Boolean) -> sap.ui.table.Column","!category":"function","!static":false},"getFilterOperator":{"!description":"Gets current value of property <code>filterOperator<\/code>.\n\nFilter operator to use when filtering this column.","!type":"fn() -> String","!category":"function","!static":false},"setVisible":{"!description":"Sets a new value for property <code>visible<\/code>.\n\nInvisible controls are not rendered.\n\nWhen called with a value of <code>null<\/code> or <code>undefined<\/code>, the default value of the property will be restored.\n\nDefault value is <code>true<\/code>.","!type":"fn(bVisible: Boolean) -> sap.ui.table.Column","!category":"function","!static":false},"setMenu":{"!description":"Sets the aggregated <code>menu<\/code>.","!type":"fn(oMenu: sap.ui.unified.Menu) -> sap.ui.table.Column","!category":"function","!static":false},"removeAllMultiLabels":{"!description":"Removes all the controls from the aggregation <code>multiLabels<\/code>.\n\nAdditionally, it unregisters them from the hosting UIArea.","!type":"fn() -> [sap.ui.core.Control]","!category":"function","!static":false},"getLabel":{"!description":"Gets content of aggregation <code>label<\/code>.\n\nLabel of the column which is displayed in the column header. This aggregation is for the standard behavior,\nwhere you only want to display one single row header. If a string is supplied, a default label control will be\ncreated. Which control this is depends on the loaded libraries.","!type":"fn() -> sap.ui.core.Control | String","!category":"function","!static":false},"setAutoResizable":{"!description":"Sets a new value for property <code>autoResizable<\/code>.\n\nEnables auto-resizing of the column on double-clicking the resizer. The width is determined on the widest\ncurrently displayed content. It does not consider rows which are currently not scrolled into view.\nCurrently only implemented to work with the following controls:\n<code>sap.m.Text, sap.m.Label, sap.m.Link, sap.m.Input,\nsap.ui.commons.TextView, sap.ui.commons.Label, sap.ui.commons.Link and sap.ui.commons.TextField,\nsap.ui.commons.Checkbox, sap.m.Checkbox<\/code>\n\nWhen called with a value of <code>null<\/code> or <code>undefined<\/code>, the default value of the property will be restored.\n\nDefault value is <code>false<\/code>.","!type":"fn(bAutoResizable: Boolean) -> sap.ui.table.Column","!category":"function","!static":false},"setFlexible":{"!description":"Sets a new value for property <code>flexible<\/code>.\n\nIf the table is wider than the sum of widths of the visible columns, the columns will be\nresized proportionally to their widths that were set originally. If set to false, the column will be displayed in the\noriginal width. If all columns are set to not be flexible, an extra \"dummy\" column will be\ncreated at the end of the table.\n\nWhen called with a value of <code>null<\/code> or <code>undefined<\/code>, the default value of the property will be restored.\n\nDefault value is <code>true<\/code>.","!type":"fn(bFlexible: Boolean) -> sap.ui.table.Column","!category":"function","!static":false},"addMultiLabel":{"!description":"Adds some multiLabel to the aggregation <code>multiLabels<\/code>.","!type":"fn(oMultiLabel: sap.ui.core.Control) -> sap.ui.table.Column","!category":"function","!static":false},"!description":"The column allows you to define column specific properties that will be applied when rendering the table.","setSortProperty":{"!description":"Sets a new value for property <code>sortProperty<\/code>.\n\nSpecifies the binding property on which the column will sort.\nSince the column template may have composite bindings, it's not possible to figure out on which binding\nproperty the sort shall be applied. Therefore the binding property for sorting must be specified.\nFor example, if the first name and last name are displayed in the same column, only one of the two can be defined as\n<code>sortProperty<\/code>.\n\nA column menu entry for sorting can only be generated if the <code>sortProperty<\/code> is set.\n\nWhen called with a value of <code>null<\/code> or <code>undefined<\/code>, the default value of the property will be restored.","!type":"fn(sSortProperty: String) -> sap.ui.table.Column","!category":"function","!static":false},"getAutoResizable":{"!description":"Gets current value of property <code>autoResizable<\/code>.\n\nEnables auto-resizing of the column on double-clicking the resizer. The width is determined on the widest\ncurrently displayed content. It does not consider rows which are currently not scrolled into view.\nCurrently only implemented to work with the following controls:\n<code>sap.m.Text, sap.m.Label, sap.m.Link, sap.m.Input,\nsap.ui.commons.TextView, sap.ui.commons.Label, sap.ui.commons.Link and sap.ui.commons.TextField,\nsap.ui.commons.Checkbox, sap.m.Checkbox<\/code>\n\nDefault value is <code>false<\/code>.","!type":"fn() -> Boolean","!category":"function","!static":false},"getName":{"!description":"Gets current value of property <code>name<\/code>.\n\nThe name of the column which is used in the column visibility menu item as text.\nIf not set as a fallback the column menu tries to get the text from the nested Label.","!type":"fn() -> String","!category":"function","!static":false},"setResizable":{"!description":"Sets a new value for property <code>resizable<\/code>.\n\nIf set to true, the column can be resized either using the resize-handle (by mouse) or using\nthe keyboard (SHIFT + Left/Right Arrow keys)\n\nWhen called with a value of <code>null<\/code> or <code>undefined<\/code>, the default value of the property will be restored.\n\nDefault value is <code>true<\/code>.","!type":"fn(bResizable: Boolean) -> sap.ui.table.Column","!category":"function","!static":false},"getMenu":{"!description":"Gets content of aggregation <code>menu<\/code>.\n\nThe menu used by the column. By default the {@link sap.ui.table.ColumnMenu} is used.\n\n<b>Note:<\/b> Applications must not use or change the default <code>sap.ui.table.ColumnMenu<\/code> of\na column in any way or create own instances of <code>sap.ui.table.ColumnMenu<\/code>.\nTo add a custom menu to a column, use the aggregation <code>menu<\/code> with a new instance of\n<code>sap.ui.unified.Menu<\/code>.","!type":"fn() -> sap.ui.unified.Menu","!category":"function","!static":false},"setFilterOperator":{"!description":"Sets a new value for property <code>filterOperator<\/code>.\n\nFilter operator to use when filtering this column.\n\nWhen called with a value of <code>null<\/code> or <code>undefined<\/code>, the default value of the property will be restored.","!type":"fn(sFilterOperator: String) -> sap.ui.table.Column","!category":"function","!static":false},"setFilterProperty":{"!description":"Sets a new value for property <code>filterProperty<\/code>.\n\nSpecifies the binding property on which the column shall be filtered.\nSince the column template may have composite bindings, it's not possible to figure out on which binding\nproperty the filter shall be applied. Therefore the binding property for filtering must be specified.\nFor example, if the first name and last name are displayed in the same column, only one of the two can be defined as\n<code>filterProperty<\/code>.\n\nA column menu entry for filtering can only be generated if the <code>filterProperty<\/code> is set. The\ndefault menu entry is a text input field.\n\nWhen called with a value of <code>null<\/code> or <code>undefined<\/code>, the default value of the property will be restored.","!type":"fn(sFilterProperty: String) -> sap.ui.table.Column","!category":"function","!static":false},"getShowFilterMenuEntry":{"!description":"Gets current value of property <code>showFilterMenuEntry<\/code>.\n\nDefines if the filter menu entry is displayed\n\nDefault value is <code>true<\/code>.","!type":"fn() -> Boolean","!category":"function","!static":false},"attachColumnMenuOpen":{"!description":"Attaches event handler <code>fnFunction<\/code> to the <code>columnMenuOpen<\/code> event of this <code>sap.ui.table.Column<\/code>.\n\nWhen called, the context of the event handler (its <code>this<\/code>) will be bound to <code>oListener<\/code> if specified, \notherwise it will be bound to this <code>sap.ui.table.Column<\/code> itself.\n\nFires before the column menu is opened.","!type":"fn(oData?: Object, fnFunction: fn(), oListener?: Object) -> sap.ui.table.Column","!category":"function","!static":false},"getMetadata":{"!description":"Returns a metadata object for class sap.ui.table.Column.","!type":"fn() -> sap.ui.base.Metadata","!category":"function","!static":true}},"sap.ui.table.AnalyticalTable":{"getNumberOfExpandedLevels":{"!description":"Gets current value of property <code>numberOfExpandedLevels<\/code>.\n\nNumber of levels, which should be opened initially (on first load of data).\n\nDefault value is <code>0<\/code>.","!type":"fn() -> Number","!category":"function","!static":false},"setSelectionInterval":{"!description":"Sets the selection of the TreeTable to the given range (including boundaries).\nBeware: The previous selection will be lost/overriden. If this is not wanted, please use \"addSelectionInterval\" and\n\"removeSelectionIntervall\".","!type":"fn(iFromIndex: Number, iToIndex: Number) -> sap.ui.table.TreeTable","!category":"function","!static":false},"setDirty":{"!description":"<strong style=\"color: red;\">Deprecated! <\/strong>Since 1.21.2 Please use setShowOverlay instead.<br>Sets a new value for property <code>dirty<\/code>.\n\nIf dirty the content of the Table will be overlayed.\n\nWhen called with a value of <code>null<\/code> or <code>undefined<\/code>, the default value of the property will be restored.","!type":"fn(bDirty: Boolean) -> sap.ui.table.AnalyticalTable","!category":"function","!static":false},"getDirty":{"!description":"<strong style=\"color: red;\">Deprecated! <\/strong>Since 1.21.2 Please use setShowOverlay instead.<br>Gets current value of property <code>dirty<\/code>.\n\nIf dirty the content of the Table will be overlayed.","!type":"fn() -> Boolean","!category":"function","!static":false},"getCollapseRecursive":{"!description":"Gets current value of property <code>collapseRecursive<\/code>.\n\nSetting collapseRecursive to true means, that when collapsing a node all subsequent child nodes will also be collapsed.\n\nDefault value is <code>true<\/code>.","!type":"fn() -> Boolean","!category":"function","!static":false},"!module":"sap/ui/table/AnalyticalTable","getTotalSize":{"!description":"Returns the total size of the data entries.","!type":"fn() -> Number","!category":"function","!static":false},"setSelectionMode":{"!description":"Sets the selection mode, the current selection is lost.\nSince the AnalyticalTable relies on the RowSelector for rendering the group headers the SelectionMode \"None\" is\nnot supported and must not be used.","!type":"fn(sSelectionMode: String) -> sap.ui.table.Table","!category":"function","!static":false},"collapseAll":{"!description":"Collapses all nodes (and lower if collapseRecursive is activated)","!type":"fn() -> sap.ui.table.TreeTable","!category":"function","!static":false},"getContextByIndex":{"!description":"Returns the context of a row by its index.","!type":"fn(iIndex: Number) -> Object","!category":"function","!static":false},"suspendUpdateAnalyticalInfo":{"!description":"This function is used by some composite controls to avoid updating the AnalyticalInfo when several column are added to the table.\nIn order to finally update the AnalyticalInfo and request data, resumeUpdateAnalyticalInfo must be called.","!type":"fn()","!category":"function","!static":false},"!category":"class","setSelectionBehavior":{"!description":"Sets the selection behavior.\nSince the AnalyticalTable relies on the RowSelector for rendering the group headers the SelectionBehavior \"RowOnly\" is\nnot supported and must not be used.","!type":"fn(sBehavior: String) -> sap.ui.table.Table","!category":"function","!static":false},"setNumberOfExpandedLevels":{"!description":"Sets a new value for property <code>numberOfExpandedLevels<\/code>.\n\nNumber of levels, which should be opened initially (on first load of data).\n\nWhen called with a value of <code>null<\/code> or <code>undefined<\/code>, the default value of the property will be restored.\n\nDefault value is <code>0<\/code>.","!type":"fn(iNumberOfExpandedLevels: Number) -> sap.ui.table.AnalyticalTable","!category":"function","!static":false},"removeSelectionInterval":{"!description":"All rows/tree nodes inside the range (including boundaries) will be deselected.\nTree nodes are referenced with theit absolute row index inside the tree-\nPlease be aware, that the absolute row index only applies to the the tree which is visualized by the TreeTable.\nInvisible nodes (collapsed child nodes) will not be regarded.","!type":"fn(iFromIndex: Number, iToIndex: Number) -> sap.ui.table.TreeTable","!category":"function","!static":false},"setColumnVisibilityMenuSorter":{"!description":"Sets a new value for property <code>columnVisibilityMenuSorter<\/code>.\n\nFunctions which is used to sort the column visibility menu entries e.g.: function(ColumnA, ColumnB) { return 0 = equals, <0 lower, >0 greater }; Other values than functions will be ignored.\n\nWhen called with a value of <code>null<\/code> or <code>undefined<\/code>, the default value of the property will be restored.","!type":"fn(oColumnVisibilityMenuSorter: Object) -> sap.ui.table.AnalyticalTable","!category":"function","!static":false},"getColumnVisibilityMenuSorter":{"!description":"Gets current value of property <code>columnVisibilityMenuSorter<\/code>.\n\nFunctions which is used to sort the column visibility menu entries e.g.: function(ColumnA, ColumnB) { return 0 = equals, <0 lower, >0 greater }; Other values than functions will be ignored.","!type":"fn() -> Object","!category":"function","!static":false},"extend":{"!description":"Creates a new subclass of class sap.ui.table.AnalyticalTable with name <code>sClassName<\/code>\nand enriches it with the information contained in <code>oClassInfo<\/code>.\n\n<code>oClassInfo<\/code> might contain the same kind of information as described in {@link sap.ui.table.Table.extend}.","!type":"fn(sClassName: String, oClassInfo?: Object, FNMetaImpl?: fn()) -> fn()","!category":"function","!static":true},"clearSelection":{"!description":"Clears the complete selection (all tree table rows/nodes will lose their selection)","!type":"fn() -> sap.ui.table.TreeTable","!category":"function","!static":false},"getSelectedIndices":{"!description":"Returns an array containing the row indices of all selected tree nodes (ordered ascending).\n\nPlease be aware of the following:\nDue to performance/network traffic reasons, the getSelectedIndices function returns only all indices\nof actually selected rows/tree nodes. Unknown rows/nodes (as in \"not yet loaded\" to the client), will not be\nreturned.","!type":"fn() -> [Number]","!category":"function","!static":false},"getSumOnTop":{"!description":"Gets current value of property <code>sumOnTop<\/code>.\n\nSpecifies if the total values should be displayed in the group headers or on bottom of the row. Does not affact the total sum.\n\nDefault value is <code>false<\/code>.","!type":"fn() -> Boolean","!category":"function","!static":false},"!constructorDescription":"Constructor for a new AnalyticalTable.\n\n\nAccepts an object literal <code>mSettings<\/code> that defines initial\nproperty values, aggregated and associated objects as well as event handlers.\nSee {@link sap.ui.base.ManagedObject#constructor} for a general description of the syntax of the settings object.\n\nThe supported settings are:\n<ul>\n<li>Properties\n<ul>\n<li>{@link #getSumOnTop sumOnTop} : boolean (default: false)<\/li>\n<li>{@link #getNumberOfExpandedLevels numberOfExpandedLevels} : int (default: 0)<\/li>\n<li>{@link #getAutoExpandMode autoExpandMode} : string (default: Bundled)<\/li>\n<li>{@link #getColumnVisibilityMenuSorter columnVisibilityMenuSorter} : any<\/li>\n<li>{@link #getCollapseRecursive collapseRecursive} : boolean (default: true)<\/li>\n<li>{@link #getDirty dirty} : boolean<\/li>\n<\/ul>\n<\/li>\n<\/ul>\n\nIn addition, all settings applicable to the base type {@link sap.ui.table.Table#constructor sap.ui.table.Table}\ncan be used as well.","selectAll":{"!description":"Selects all available nodes/rows.\n\nExplanation of the SelectAll function and what to expect from its behavior:\nAll rows/tree nodes locally stored on the client are selected.\nIn addition all subsequent rows/tree nodes, which will be paged into view are also immediatly selected.\nHowever, due to obvious performance/network traffic reasons, the SelectAll function will NOT retrieve any data from the backend.","!type":"fn() -> sap.ui.table.TreeTable","!category":"function","!static":false},"setSumOnTop":{"!description":"Sets a new value for property <code>sumOnTop<\/code>.\n\nSpecifies if the total values should be displayed in the group headers or on bottom of the row. Does not affact the total sum.\n\nWhen called with a value of <code>null<\/code> or <code>undefined<\/code>, the default value of the property will be restored.\n\nDefault value is <code>false<\/code>.","!type":"fn(bSumOnTop: Boolean) -> sap.ui.table.AnalyticalTable","!category":"function","!static":false},"!description":"Table which handles analytical OData backends. The AnalyticalTable only works with an AnalyticalBinding and\ncorrectly annotated OData services. Please check on the SAP Annotations for OData Version 2.0 documentation for further details.","getAutoExpandMode":{"!description":"Gets current value of property <code>autoExpandMode<\/code>.\n\nThe kind of auto expansion algorithm, e.g. optimised filter conditions, per level requests, ...\nsap.ui.table.TreeAutoExpandMode\n\nDefault value is <code>Bundled<\/code>.","!type":"fn() -> String","!category":"function","!static":false},"isIndexSelected":{"!description":"Checks if the row at the given index is selected.","!type":"fn(iRowIndex: Number) -> Boolean","!category":"function","!static":false},"resumeUpdateAnalyticalInfo":{"!description":"This function is used by some composite controls to force updating the AnalyticalInfo","!type":"fn(bSuppressRefresh: Boolean, bForceChange: Boolean)","!category":"function","!static":false},"setSelectedIndex":{"!description":"Overriden from Table.js base class.\nIn a TreeTable you can only select indices, which correspond to the currently visualized tree.\nInvisible tree nodes (e.g. collapsed child nodes) can not be selected via Index, because they do not\ncorrespond to a TreeTable row.","!type":"fn(iRowIndex: Number) -> sap.ui.table.TreeTable","!category":"function","!static":false},"addSelectionInterval":{"!description":"Marks a range of tree nodes as selected, starting with iFromIndex going to iToIndex.\nThe TreeNodes are referenced via their absolute row index.\nPlease be aware, that the absolute row index only applies to the the tree which is visualized by the TreeTable.\nInvisible nodes (collapsed child nodes) will not be regarded.\n\nPlease also take notice of the fact, that \"addSelectionInterval\" does not change any other selection.\nTo override the current selection, please use \"setSelctionInterval\" or for a single entry use \"setSelectedIndex\".","!type":"fn(iFromIndex: Number, iToIndex: Number) -> sap.ui.table.TreeTable","!category":"function","!static":false},"getSelectedIndex":{"!description":"Retrieves the lead selection index. The lead selection index is, among other things, used to determine the\nstart/end of a selection range, when using Shift-Click to select multiple entries at once.","!type":"fn() -> [Number]","!category":"function","!static":false},"setAutoExpandMode":{"!description":"Sets a new value for property <code>autoExpandMode<\/code>.\n\nThe kind of auto expansion algorithm, e.g. optimised filter conditions, per level requests, ...\nsap.ui.table.TreeAutoExpandMode\n\nWhen called with a value of <code>null<\/code> or <code>undefined<\/code>, the default value of the property will be restored.\n\nDefault value is <code>Bundled<\/code>.","!type":"fn(sAutoExpandMode: String) -> sap.ui.table.AnalyticalTable","!category":"function","!static":false},"!proto":"sap.ui.table.Table","getMetadata":{"!description":"Returns a metadata object for class sap.ui.table.AnalyticalTable.","!type":"fn() -> sap.ui.base.Metadata","!category":"function","!static":true}},"sap.ui.table":{"visibleRowCountMode":{"!description":"This defines how the table handles the visible rows in the table. The default behavior is,\nthat a fixed row count is defined. If you change it to auto the visibleRowCount property is\nchanged by the table automatically. It will then adjust its maximum row count to the space it is\nallowed to cover (limited by the surrounding container) and its minimum row count to the value of\nthe property minAutoRowCount (default value : 5) In manual mode the user can change\nthe visibleRowCount interactively.","!type":"sap.ui.table.VisibleRowCountMode","!category":"enum"},"expandFirstLevel":{"!description":"Flag to enable or disable expanding of first level.","!type":"Boolean","!category":"enum"},"autoExpandMode":{"!description":"The kind of auto expansion algorithm, e.g. optimised filter conditions, per level requests, ...\nsap.ui.table.TreeAutoExpandMode","!type":"String","!category":"enum"},"sumOnTop":{"!description":"Specifies if the total values should be displayed in the group headers or on bottom of the row. Does not affact the total sum.","!type":"Boolean","!category":"enum"},"selectionBehavior":{"!description":"Selection behavior of the Table. This property defines whether the row selector is displayed and whether the row, the row selector or both\ncan be clicked to select a row.","!type":"sap.ui.table.SelectionBehavior","!category":"enum"},"filtered":{"!description":"Indicates if the column is filtered. This property only controls if a filter indicator is displayed in the\ncolumn header - it does not trigger the filter function. The column has to be filtered by calling <code>Column.sort()<\/code>","!type":"Boolean","!category":"enum"},"enableBusyIndicator":{"!description":"Set this parameter to true to make the table handle the busy indicator by its own.\nThe table will switch to busy as soon as it scrolls into an unpaged area. This feature can only\nbe used when the navigation mode is set to scrolling.","!type":"Boolean","!category":"enum"},"visible":{"!description":"Whether the control should be visible on the screen. If set to false, a placeholder is rendered instead of the real control","!type":"Boolean","!category":"enum"},"GroupEventType":"sap.ui.table.GroupEventType","showOverlay":{"!description":"Setting this property to true will show an overlay on top of the Table content and users cannot click anymore on the Table content.","!type":"Boolean","!category":"enum"},"SortOrder":"sap.ui.table.SortOrder","enableSelectAll":{"!description":"Specifies if a select all button should be displayed in the top left corner. This button is only displayed\nif the row selector is visible and the selection mode is set to any kind of multi selection.","!type":"Boolean","!category":"enum"},"columnHeaderVisible":{"!description":"Flag whether the column header is visible or not.","!type":"Boolean","!category":"enum"},"busy":{"!description":"Whether the control is currently in busy state.","!type":"Boolean","!category":"enum"},"!module":"sap/ui/table/library","groupHeaderFormatter":{"!description":"If the column is grouped, this formatter is used to format the value in the group header","!type":"Object","!category":"enum"},"Column":"sap.ui.table.Column_obj","enableCellFilter":{"!description":"Flag whether to enable or disable the context menu on cells to trigger a filtering with the cell value.","!type":"Boolean","!category":"enum"},"selectionMode":{"!description":"Selection mode of the Table. This property controls whether single or multiple rows can be selected and\nhow the selection can be extended. It may also influence the visual appearance.","!type":"sap.ui.table.SelectionMode","!category":"enum"},"columnHeaderHeight":{"!description":"Height of the column header of the Table in pixel.","!type":"Number","!category":"enum"},"grouped":{"!description":"Indicates if the column is grouped.","!type":"Boolean","!category":"enum"},"showIfGrouped":{"!description":"Specifies whether the column is displayed within the table even if it is grouped or not. A grouped column has the same value for every rows within the group.","!type":"Boolean","!category":"enum"},"resizable":{"!description":"If set to true, the column can be resized either using the resize-handle (by mouse) or using\nthe keyboard (SHIFT + Left/Right Arrow keys)","!type":"Boolean","!category":"enum"},"busyIndicatorDelay":{"!description":"The delay in milliseconds, after which the busy indicator will show up for this control.","!type":"Number","!category":"enum"},"AnalyticalTable":"sap.ui.table.AnalyticalTable_obj","AnalyticalColumn":"sap.ui.table.AnalyticalColumn_obj","inResult":{"!description":"Specifies that the dimension referred to by the column shall be included in the granularity of the data result. It allows a finer distinction between a visible/grouped/(included)inResult column.","!type":"Boolean","!category":"enum"},"minAutoRowCount":{"!description":"This property is used to set the minimum count of visible rows when the property visibleRowCountMode is set to Auto or Interactive.\nFor any other visibleRowCountMode, it is ignored.","!type":"Number","!category":"enum"},"sortOrder":{"!description":"This property indicates the sort direction (Ascending or Descending). The corresponding icon will be\nrendered if the property <code>sorted<\/code> is <code>true<\/code>","!type":"sap.ui.table.SortOrder","!category":"enum"},"width":{"!description":"Width of the Table.","!type":"sap.ui.core.CSSSize","!category":"enum"},"AnalyticalColumnMenu":"sap.ui.table.AnalyticalColumnMenu_obj","visibleRowCount":{"!description":"Number of visible rows of the table.","!type":"Number","!category":"enum"},"navigationMode":{"!description":"<strong style=\"color: red;\">Deprecated! <\/strong>Since 1.38 there is no replacement, since <code>Scrollbar<\/code> is the only supported option<br>Determines whether a scrollbar or a paginator is used for navigation inside the table.\nIf the paginator mode is used, it requires the <code>sap.ui.commons<\/code> library.\n\nThis renders a scrollbar as a navigation element. Data fetched from an OData service is still\nloaded page-wise no matter which visual representation is used for navigation inside the table.","!type":"sap.ui.table.NavigationMode","!category":"enum"},"flexible":{"!description":"If the table is wider than the sum of widths of the visible columns, the columns will be\nresized proportionally to their widths that were set originally. If set to false, the column will be displayed in the\noriginal width. If all columns are set to not be flexible, an extra \"dummy\" column will be\ncreated at the end of the table.","!type":"Boolean","!category":"enum"},"SharedDomRef":"sap.ui.table.SharedDomRef","rowHeight":{"!description":"Height of a row of the Table in pixel.","!type":"Number","!category":"enum"},"editable":{"!description":"Flag whether the controls of the Table are editable or not (currently this only controls the background color in certain themes!)","!type":"Boolean","!category":"enum"},"TablePersoController":"sap.ui.table.TablePersoController_obj","enableColumnReordering":{"!description":"Flag to enable or disable column reordering","!type":"Boolean","!category":"enum"},"TreeAutoExpandMode":"sap.ui.table.TreeAutoExpandMode","NavigationMode":"sap.ui.table.NavigationMode","Row":"sap.ui.table.Row_obj","rootLevel":{"!description":"The root level is the level of the topmost tree nodes, which will be used as an entry point for OData services.\nThis property is only supported when the TreeTable uses an underlying odata services with hierarchy annotations.\nThis property is only supported with sap.ui.model.odata.v2.ODataModel\nThe hierarchy annotations may also be provided locally as a parameter for the ODataTreeBinding.","!type":"Number","!category":"enum"},"TreeTable":"sap.ui.table.TreeTable_obj","showSortMenuEntry":{"!description":"Defines if the sort menu entries are displayed","!type":"Boolean","!category":"enum"},"fixedColumnCount":{"!description":"Number of columns that are fix on the left. When you use a horizontal scroll bar, only\nthe columns which are not fixed, will scroll. Fixed columns need a defined width for the feature to work.\nPlease note that the aggregated width of all fixed columns must not exceed the table width since there\nwill be no scrollbar for fixed columns.","!type":"Number","!category":"enum"},"filterType":{"!description":"Type of Filter. This is used to transform the search term to the specified type,\nto make sure that the right columns are displayed. This should be the same as defined\nin binding for this column. As an alternative you can pass a function which does the conversion.\nThe function receives the entered filter value as parameter and returns the proper\nvalue for the filter expression. Another option is to pass the class name of the type,\ne.g.: <code>sap.ui.model.type.Date<\/code> or an expression similar to the binding syntax,\ne.g.: <code>\"\\{type: 'sap.ui.model.type.Date', formatOptions: \\{UTC: true\\}, constraints: {} \\}\"<\/code>.\nHere the escaping is mandatory to avoid handling by the binding parser.\nBy default the filter type is <code>sap.ui.model.type.String<\/code>.","!type":"Object","!category":"enum"},"filterProperty":{"!description":"Specifies the binding property on which the column shall be filtered.\nSince the column template may have composite bindings, it's not possible to figure out on which binding\nproperty the filter shall be applied. Therefore the binding property for filtering must be specified.\nFor example, if the first name and last name are displayed in the same column, only one of the two can be defined as\n<code>filterProperty<\/code>.\n\nA column menu entry for filtering can only be generated if the <code>filterProperty<\/code> is set. The\ndefault menu entry is a text input field.","!type":"String","!category":"enum"},"customDataKey":{"!description":"By defining a custom data key the <code>TablePersoController<\/code>\nwill try to get the key for saving the perso data from the custom\ndata of the Table and Column instead of creating it by concatenating\nthe ID of the Table and the Column. Basically this will be more stable\nthan using the auto IDs.","!type":"String","!category":"enum"},"enableGrouping":{"!description":"Flag to enable or disable column grouping. (experimental!)","!type":"Boolean","!category":"enum"},"persoService":{"!description":"Personalization Service object. Needs to have the following methods:\n<ul>\n<li>getPersData() : <code>jQuery Promise<\/code> (http://api.jquery.com/promise/)<\/li>\n<li>setPersData(oBundle) : <code>jQuery Promise<\/code> (http://api.jquery.com/promise/)<\/li>\n<li>delPersData() : <code>jQuery Promise<\/code> (http://api.jquery.com/promise/)<\/li>\n<\/ul>","!type":"Object","!category":"enum"},"groupHeaderProperty":{"!description":"The property name of the rows data which will be displayed as a group header if the group mode is enabled","!type":"String","!category":"enum"},"autoSave":{"!description":"Auto save state","!type":"Boolean","!category":"enum"},"columnVisibilityMenuSorter":{"!description":"Functions which is used to sort the column visibility menu entries e.g.: function(ColumnA, ColumnB) { return 0 = equals, <0 lower, >0 greater }; Other values than functions will be ignored.","!type":"Object","!category":"enum"},"hAlign":{"!description":"Horizontal alignment of the column content. Controls with a text align do not inherit\nthe horizontal alignment. You have to set the text align directly on the template.","!type":"sap.ui.core.HorizontalAlign","!category":"enum"},"Table":"sap.ui.table.Table_obj","showFilterMenuEntry":{"!description":"Defines if the filter menu entry is displayed","!type":"Boolean","!category":"enum"},"filterValue":{"!description":"Specifies the value of the filter as string (will be converted into the proper data type). It is possible\nto provide a filterOperator as string, as shown here:\n<pre>\n&gt; 50\n&lt; 100\n&gt;= 150\n&lt;= 200\n= 250\n!= 300\n*something    ends with\nsomething*    starts with\n*something*   contains\nsome..thing   between\n50..100       between\n<\/pre>","!type":"String","!category":"enum"},"filterOperator":{"!description":"Filter operator to use when filtering this column.","!type":"String","!category":"enum"},"name":{"!description":"The name of the column which is used in the column visibility menu item as text.\nIf not set as a fallback the column menu tries to get the text from the nested Label.","!type":"String","!category":"enum"},"dirty":{"!description":"<strong style=\"color: red;\">Deprecated! <\/strong>Since 1.21.2 Please use setShowOverlay instead.<br>If dirty the content of the Table will be overlayed.","!type":"Boolean","!category":"enum"},"!category":"namespace","enableColumnFreeze":{"!description":"Flag whether to show or hide the column menu item to freeze or unfreeze a column.","!type":"Boolean","!category":"enum"},"headerSpan":{"!description":"If this property is set, a span is applied for the header. When moving columns, all columns\nwhich are part of the header will be moved. The <code>headerSpan<\/code> can be either an integer or an array of\nintegers (if you use the multi header feature of the table). If you only specify an integer, this span is\napplied for all header rows, with multiple integers you can specify a separate span for each header row.","!type":"Object","!category":"enum"},"selectedIndex":{"!description":"Zero-based index of selected item. Index value for no selection is -1.\nWhen multi-selection is enabled and multiple items are selected, the method returns\nthe lead selected item. Sets the zero-based index of the currently selected item. This method\nremoves any previous selections. When the given index is invalid, the call is ignored.","!type":"Number","!category":"enum"},"VisibleRowCountMode":"sap.ui.table.VisibleRowCountMode","autoResizable":{"!description":"Enables auto-resizing of the column on double-clicking the resizer. The width is determined on the widest\ncurrently displayed content. It does not consider rows which are currently not scrolled into view.\nCurrently only implemented to work with the following controls:\n<code>sap.m.Text, sap.m.Label, sap.m.Link, sap.m.Input,\nsap.ui.commons.TextView, sap.ui.commons.Label, sap.ui.commons.Link and sap.ui.commons.TextField,\nsap.ui.commons.Checkbox, sap.m.Checkbox<\/code>","!type":"Boolean","!category":"enum"},"sortProperty":{"!description":"Specifies the binding property on which the column will sort.\nSince the column template may have composite bindings, it's not possible to figure out on which binding\nproperty the sort shall be applied. Therefore the binding property for sorting must be specified.\nFor example, if the first name and last name are displayed in the same column, only one of the two can be defined as\n<code>sortProperty<\/code>.\n\nA column menu entry for sorting can only be generated if the <code>sortProperty<\/code> is set.","!type":"String","!category":"enum"},"defaultFilterOperator":{"!description":"If this property is set, the default filter operator of the column is overridden.\nBy default <code>Contains<\/code> is used for string and <code>EQ<\/code> for other types. A valid <code>sap.ui.model.FilterOperator<\/code> needs to be passed.","!type":"String","!category":"enum"},"firstVisibleRow":{"!description":"First visible row.","!type":"Number","!category":"enum"},"sorted":{"!description":"Indicates if the column is sorted. This property only controls if a sort indicator is displayed in the\ncolumn header - it does not trigger the sort function. The column has to be sorted by calling <code>Column.sort()<\/code>","!type":"Boolean","!category":"enum"},"showNoData":{"!description":"Flag whether to show the no data overlay or not once the table is empty. If set to false\nthe table will just show a grid of empty cells","!type":"Boolean","!category":"enum"},"collapseRecursive":{"!description":"Setting collapseRecursive to true means, that when collapsing a node all subsequent child nodes will also be collapsed.\nThis property is only supported with sap.ui.model.odata.v2.ODataModel","!type":"Boolean","!category":"enum"},"fixedBottomRowCount":{"!description":"Number of rows that are fix on the bottom. When you use a vertical scroll bar, only the rows which are not fixed, will scroll.","!type":"Number","!category":"enum"},"showColumnVisibilityMenu":{"!description":"Flag to show or hide the column visibility menu. This menu will get displayed in each\ngenerated column header menu. It allows to show or hide columns","!type":"Boolean","!category":"enum"},"threshold":{"!description":"The <code>threshold<\/code> defines how many additional (not yet visible records) shall be pre-fetched to enable smooth\nscrolling. The threshold is always added to the <code>visibleRowCount<\/code>. If the <code>visibleRowCount<\/code> is 10 and the\n<code>threshold<\/code> is 100, there will be 110 records fetched with the initial load.\nIf the <code>threshold<\/code> is lower than the <code>visibleRowCount<\/code>, the <code>visibleRowCount<\/code> will be used as\nthe <code>threshold<\/code>. If the value is 0 then the thresholding is disabled.","!type":"Number","!category":"enum"},"SelectionBehavior":"sap.ui.table.SelectionBehavior","!description":"Table-like controls, mainly for desktop scenarios.","numberOfExpandedLevels":{"!description":"Number of levels, which should be opened initially (on first load of data).","!type":"Number","!category":"enum"},"summed":{"!description":"If defined a sum for this column is calculated","!type":"Boolean","!category":"enum"},"fieldGroupIds":{"!description":"The IDs of a logical field group that this control belongs to. All fields in a logical field group should share the same <code>fieldGroupId<\/code>.\nOnce a logical field group is left, the validateFieldGroup event is raised.","!type":"[String]","!category":"enum"},"enableCustomFilter":{"!description":"Set this parameter to true to implement your own filter behaviour. Instead of the filter input box a button\nwill be rendered for which' press event (customFilter) you can register an event handler.","!type":"Boolean","!category":"enum"},"useGroupMode":{"!description":"If group mode is enable nodes with subitems are rendered as if they were group headers.\nThis can be used to do the grouping for an OData service on the backend and visualize this in a table.\nThis mode only makes sense if the tree has a depth of exacly 1 (group headers and entries)","!type":"Boolean","!category":"enum"},"fixedRowCount":{"!description":"Number of rows that are fix on the top. When you use a vertical scroll bar, only the rows which are not fixed, will scroll.","!type":"Number","!category":"enum"},"ColumnMenu":"sap.ui.table.ColumnMenu_obj","SelectionMode":"sap.ui.table.SelectionMode","leadingProperty":{"!description":"Defines the primary model property which is used inside the Column. In case of the analytical extension this means the property which is grouped by for dimensions or the property which is summed for measures.","!type":"String","!category":"enum"}},"sap.ui.table.AnalyticalColumn":{"setSummed":{"!description":"Sets a new value for property <code>summed<\/code>.\n\nIf defined a sum for this column is calculated\n\nWhen called with a value of <code>null<\/code> or <code>undefined<\/code>, the default value of the property will be restored.\n\nDefault value is <code>false<\/code>.","!type":"fn(bSummed: Boolean) -> sap.ui.table.AnalyticalColumn","!category":"function","!static":false},"setLeadingProperty":{"!description":"Sets a new value for property <code>leadingProperty<\/code>.\n\nDefines the primary model property which is used inside the Column. In case of the analytical extension this means the property which is grouped by for dimensions or the property which is summed for measures.\n\nWhen called with a value of <code>null<\/code> or <code>undefined<\/code>, the default value of the property will be restored.","!type":"fn(sLeadingProperty: String) -> sap.ui.table.AnalyticalColumn","!category":"function","!static":false},"getShowIfGrouped":{"!description":"Gets current value of property <code>showIfGrouped<\/code>.\n\nSpecifies whether the column is displayed within the table even if it is grouped or not. A grouped column has the same value for every rows within the group.\n\nDefault value is <code>false<\/code>.","!type":"fn() -> Boolean","!category":"function","!static":false},"extend":{"!description":"Creates a new subclass of class sap.ui.table.AnalyticalColumn with name <code>sClassName<\/code>\nand enriches it with the information contained in <code>oClassInfo<\/code>.\n\n<code>oClassInfo<\/code> might contain the same kind of information as described in {@link sap.ui.table.Column.extend}.","!type":"fn(sClassName: String, oClassInfo?: Object, FNMetaImpl?: fn()) -> fn()","!category":"function","!static":true},"setInResult":{"!description":"Sets a new value for property <code>inResult<\/code>.\n\nSpecifies that the dimension referred to by the column shall be included in the granularity of the data result. It allows a finer distinction between a visible/grouped/(included)inResult column.\n\nWhen called with a value of <code>null<\/code> or <code>undefined<\/code>, the default value of the property will be restored.\n\nDefault value is <code>false<\/code>.","!type":"fn(bInResult: Boolean) -> sap.ui.table.AnalyticalColumn","!category":"function","!static":false},"getGroupHeaderFormatter":{"!description":"Gets current value of property <code>groupHeaderFormatter<\/code>.\n\nIf the column is grouped, this formatter is used to format the value in the group header","!type":"fn() -> Object","!category":"function","!static":false},"!constructorDescription":"Constructor for a new AnalyticalColumn.\n\n\nAccepts an object literal <code>mSettings<\/code> that defines initial\nproperty values, aggregated and associated objects as well as event handlers.\nSee {@link sap.ui.base.ManagedObject#constructor} for a general description of the syntax of the settings object.\n\nThe supported settings are:\n<ul>\n<li>Properties\n<ul>\n<li>{@link #getLeadingProperty leadingProperty} : string<\/li>\n<li>{@link #getSummed summed} : boolean (default: false)<\/li>\n<li>{@link #getInResult inResult} : boolean (default: false)<\/li>\n<li>{@link #getShowIfGrouped showIfGrouped} : boolean (default: false)<\/li>\n<li>{@link #getGroupHeaderFormatter groupHeaderFormatter} : any<\/li>\n<\/ul>\n<\/li>\n<\/ul>\n\nIn addition, all settings applicable to the base type {@link sap.ui.table.Column#constructor sap.ui.table.Column}\ncan be used as well.","!module":"sap/ui/table/AnalyticalColumn","getLeadingProperty":{"!description":"Gets current value of property <code>leadingProperty<\/code>.\n\nDefines the primary model property which is used inside the Column. In case of the analytical extension this means the property which is grouped by for dimensions or the property which is summed for measures.","!type":"fn() -> String","!category":"function","!static":false},"getSummed":{"!description":"Gets current value of property <code>summed<\/code>.\n\nIf defined a sum for this column is calculated\n\nDefault value is <code>false<\/code>.","!type":"fn() -> Boolean","!category":"function","!static":false},"setGroupHeaderFormatter":{"!description":"Sets a new value for property <code>groupHeaderFormatter<\/code>.\n\nIf the column is grouped, this formatter is used to format the value in the group header\n\nWhen called with a value of <code>null<\/code> or <code>undefined<\/code>, the default value of the property will be restored.","!type":"fn(oGroupHeaderFormatter: Object) -> sap.ui.table.AnalyticalColumn","!category":"function","!static":false},"!description":"<strong style=\"color: red;\">Experimental! <\/strong>","getInResult":{"!description":"Gets current value of property <code>inResult<\/code>.\n\nSpecifies that the dimension referred to by the column shall be included in the granularity of the data result. It allows a finer distinction between a visible/grouped/(included)inResult column.\n\nDefault value is <code>false<\/code>.","!type":"fn() -> Boolean","!category":"function","!static":false},"!category":"class","setShowIfGrouped":{"!description":"Sets a new value for property <code>showIfGrouped<\/code>.\n\nSpecifies whether the column is displayed within the table even if it is grouped or not. A grouped column has the same value for every rows within the group.\n\nWhen called with a value of <code>null<\/code> or <code>undefined<\/code>, the default value of the property will be restored.\n\nDefault value is <code>false<\/code>.","!type":"fn(bShowIfGrouped: Boolean) -> sap.ui.table.AnalyticalColumn","!category":"function","!static":false},"!proto":"sap.ui.table.Column","getMetadata":{"!description":"Returns a metadata object for class sap.ui.table.AnalyticalColumn.","!type":"fn() -> sap.ui.base.Metadata","!category":"function","!static":true}},"sap.ui.table.SortOrder":{"!description":"Sort order of a column","Descending":{"!description":"Sort Order: descending.","!type":"String","!category":"enum"},"!category":"static class","Ascending":{"!description":"Sort Order: ascending.","!type":"String","!category":"enum"},"!module":"sap/ui/table/library"},"sap.ui.table.NavigationMode":{"!description":"Navigation mode of the table","!category":"static class","Paginator":{"!description":"<strong style=\"color: red;\">Deprecated! <\/strong>Since 1.38 replaced by {@link sap.ui.table.NavigationMode.Scrollbar}<br>Uses the paginator control.\nThis option must no longer be used. Using a scrollbar is the only navigation mode which is supported by\nthe <code>sap.ui.table<\/code> library. The <code>navigationMode<\/code> property has always been a visual representation. No matter which navigation mode\nis used, data fetched from an OData service is loaded page-wise.","!type":"String","!category":"enum"},"!module":"sap/ui/table/library","Scrollbar":{"!description":"Uses the scrollbar control.","!type":"String","!category":"enum"}},"sap.ui.table.SelectionBehavior":{"!description":"Selection behavior of the table","RowOnly":{"!description":"Rows can only be selected on the row (and the selector is hidden).","!type":"String","!category":"enum"},"Row":{"!description":"Rows can be selected on the complete row.","!type":"String","!category":"enum"},"!category":"static class","RowSelector":{"!description":"Rows can only be selected on the row selector.","!type":"String","!category":"enum"},"!module":"sap/ui/table/library"},"sap.ui.table.ColumnMenu":{"!description":"The column menu provides all common actions that can be performed on a column.","extend":{"!description":"Creates a new subclass of class sap.ui.table.ColumnMenu with name <code>sClassName<\/code>\nand enriches it with the information contained in <code>oClassInfo<\/code>.\n\n<code>oClassInfo<\/code> might contain the same kind of information as described in {@link sap.ui.unified.Menu.extend}.","!type":"fn(sClassName: String, oClassInfo?: Object, FNMetaImpl?: fn()) -> fn()","!category":"function","!static":true},"!category":"class","!constructorDescription":"Constructor for a new ColumnMenu.\n\n<b>Note:<\/b> Applications must not use or change the default <code>sap.ui.table.ColumnMenu<\/code> of\na column in any way or create own instances of <code>sap.ui.table.ColumnMenu<\/code>.\nTo add a custom menu to a column, use the aggregation <code>menu<\/code> with a new instance of\n<code>sap.ui.unified.Menu<\/code>.","!module":"sap/ui/table/ColumnMenu","getMetadata":{"!description":"Returns a metadata object for class sap.ui.table.ColumnMenu.","!type":"fn() -> sap.ui.base.Metadata","!category":"function","!static":true},"!proto":"sap.ui.unified.Menu"},"sap.ui":{"!category":"namespace","table":"sap.ui.table"},"sap.ui.table.SharedDomRef":{"!description":"Shared DOM Reference IDs of the table.\n\nContains IDs of shared DOM references, which should be accessible to inheriting controls via getDomRef() function.","VerticalScrollBar":{"!description":"The element id of the Vertical Scroll Bar of the sap.ui.table.Table.","!type":"String","!category":"enum"},"!category":"static class","!module":"sap/ui/table/library","HorizontalScrollBar":{"!description":"The element id of the Horizontal Scroll Bar of the sap.ui.table.Table.","!type":"String","!category":"enum"}},"sap.ui.table.TreeTable":{"setSelectionInterval":{"!description":"Sets the selection of the TreeTable to the given range (including boundaries).\nBeware: The previous selection will be lost/overriden. If this is not wanted, please use \"addSelectionInterval\" and\n\"removeSelectionIntervall\".","!type":"fn(iFromIndex: Number, iToIndex: Number) -> sap.ui.table.TreeTable","!category":"function","!static":false},"getCollapseRecursive":{"!description":"Gets current value of property <code>collapseRecursive<\/code>.\n\nSetting collapseRecursive to true means, that when collapsing a node all subsequent child nodes will also be collapsed.\nThis property is only supported with sap.ui.model.odata.v2.ODataModel\n\nDefault value is <code>true<\/code>.","!type":"fn() -> Boolean","!category":"function","!static":false},"!module":"sap/ui/table/TreeTable","setFixedRowCount":{"!description":"Setter for property <code>fixedRowCount<\/code>.\n\n<b>This property is not supportd for the TreeTable and will be ignored!<\/b>\n\nDefault value is <code>0<\/code>","!type":"fn(iFixedRowCount: Number) -> sap.ui.table.TreeTable","!category":"function","!static":false},"setSelectionMode":{"!description":"Sets the selection mode. The current selection is lost.","!type":"fn(sSelectionMode: String)","!category":"function","!static":false},"setExpandFirstLevel":{"!description":"Sets a new value for property <code>expandFirstLevel<\/code>.\n\nFlag to enable or disable expanding of first level.\n\nWhen called with a value of <code>null<\/code> or <code>undefined<\/code>, the default value of the property will be restored.\n\nDefault value is <code>false<\/code>.","!type":"fn(bExpandFirstLevel: Boolean) -> sap.ui.table.TreeTable","!category":"function","!static":false},"collapseAll":{"!description":"Collapses all nodes (and lower if collapseRecursive is activated)","!type":"fn() -> sap.ui.table.TreeTable","!category":"function","!static":false},"!category":"class","expand":{"!description":"expands the row for the given row index","!type":"fn(iRowIndex: Number) -> sap.ui.table.TreeTable","!category":"function","!static":false},"isExpanded":{"!description":"Returns whether the row is expanded or collapsed.","!type":"fn(iRowIndex: Number) -> Boolean","!category":"function","!static":false},"removeSelectionInterval":{"!description":"All rows/tree nodes inside the range (including boundaries) will be deselected.\nTree nodes are referenced with theit absolute row index inside the tree-\nPlease be aware, that the absolute row index only applies to the the tree which is visualized by the TreeTable.\nInvisible nodes (collapsed child nodes) will not be regarded.","!type":"fn(iFromIndex: Number, iToIndex: Number) -> sap.ui.table.TreeTable","!category":"function","!static":false},"collapse":{"!description":"collapses the row for the given row index","!type":"fn(iRowIndex: Number) -> sap.ui.table.TreeTable","!category":"function","!static":false},"getGroupHeaderProperty":{"!description":"Gets current value of property <code>groupHeaderProperty<\/code>.\n\nThe property name of the rows data which will be displayed as a group header if the group mode is enabled","!type":"fn() -> String","!category":"function","!static":false},"extend":{"!description":"Creates a new subclass of class sap.ui.table.TreeTable with name <code>sClassName<\/code>\nand enriches it with the information contained in <code>oClassInfo<\/code>.\n\n<code>oClassInfo<\/code> might contain the same kind of information as described in {@link sap.ui.table.Table.extend}.","!type":"fn(sClassName: String, oClassInfo?: Object, FNMetaImpl?: fn()) -> fn()","!category":"function","!static":true},"clearSelection":{"!description":"Clears the complete selection (all tree table rows/nodes will lose their selection)","!type":"fn() -> sap.ui.table.TreeTable","!category":"function","!static":false},"fireToggleOpenState":{"!description":"Fires event <code>toggleOpenState<\/code> to attached listeners.\n\nExpects the following event parameters:\n<ul>\n<li><code>rowIndex<\/code> of type <code>int<\/code>index of the expanded/collapsed row<\/li>\n<li><code>rowContext<\/code> of type <code>object<\/code>binding context of the selected row<\/li>\n<li><code>expanded<\/code> of type <code>boolean<\/code>flag whether the node has been expanded or collapsed<\/li>\n<\/ul>","!type":"fn(mArguments?: Map) -> sap.ui.table.TreeTable","!category":"function","!static":false},"getSelectedIndices":{"!description":"Returns an array containing the row indices of all selected tree nodes (ordered ascending).\n\nPlease be aware of the following:\nDue to performance/network traffic reasons, the getSelectedIndices function returns only all indices\nof actually selected rows/tree nodes. Unknown rows/nodes (as in \"not yet loaded\" to the client), will not be\nreturned.","!type":"fn() -> [Number]","!category":"function","!static":false},"!constructorDescription":"Constructor for a new TreeTable.\n\n\nAccepts an object literal <code>mSettings<\/code> that defines initial\nproperty values, aggregated and associated objects as well as event handlers.\nSee {@link sap.ui.base.ManagedObject#constructor} for a general description of the syntax of the settings object.\n\nThe supported settings are:\n<ul>\n<li>Properties\n<ul>\n<li>{@link #getExpandFirstLevel expandFirstLevel} : boolean (default: false)<\/li>\n<li>{@link #getUseGroupMode useGroupMode} : boolean (default: false)<\/li>\n<li>{@link #getGroupHeaderProperty groupHeaderProperty} : string<\/li>\n<li>{@link #getCollapseRecursive collapseRecursive} : boolean (default: true)<\/li>\n<li>{@link #getRootLevel rootLevel} : int (default: 0)<\/li>\n<\/ul>\n<\/li>\n<li>Events\n<ul>\n<li>{@link #event:toggleOpenState toggleOpenState} : fnListenerFunction or [fnListenerFunction, oListenerObject] or [oData, fnListenerFunction, oListenerObject]<\/li>\n<\/ul>\n<\/li>\n<\/ul>\n\nIn addition, all settings applicable to the base type {@link sap.ui.table.Table#constructor sap.ui.table.Table}\ncan be used as well.","selectAll":{"!description":"Selects all available nodes/rows.\n\nExplanation of the SelectAll function and what to expect from its behavior:\nAll rows/tree nodes locally stored on the client are selected.\nIn addition all subsequent rows/tree nodes, which will be paged into view are also immediatly selected.\nHowever, due to obvious performance/network traffic reasons, the SelectAll function will NOT retrieve any data from the backend.","!type":"fn() -> sap.ui.table.TreeTable","!category":"function","!static":false},"setGroupHeaderProperty":{"!description":"Sets a new value for property <code>groupHeaderProperty<\/code>.\n\nThe property name of the rows data which will be displayed as a group header if the group mode is enabled\n\nWhen called with a value of <code>null<\/code> or <code>undefined<\/code>, the default value of the property will be restored.","!type":"fn(sGroupHeaderProperty: String) -> sap.ui.table.TreeTable","!category":"function","!static":false},"detachToggleOpenState":{"!description":"Detaches event handler <code>fnFunction<\/code> from the <code>toggleOpenState<\/code> event of this <code>sap.ui.table.TreeTable<\/code>.\n\nThe passed function and listener object must match the ones used for event registration.","!type":"fn(fnFunction: fn(), oListener: Object) -> sap.ui.table.TreeTable","!category":"function","!static":false},"getRootLevel":{"!description":"Gets current value of property <code>rootLevel<\/code>.\n\nThe root level is the level of the topmost tree nodes, which will be used as an entry point for OData services.\nThis property is only supported when the TreeTable uses an underlying odata services with hierarchy annotations.\nThis property is only supported with sap.ui.model.odata.v2.ODataModel\nThe hierarchy annotations may also be provided locally as a parameter for the ODataTreeBinding.\n\nDefault value is <code>0<\/code>.","!type":"fn() -> Number","!category":"function","!static":false},"getUseGroupMode":{"!description":"Gets current value of property <code>useGroupMode<\/code>.\n\nIf group mode is enable nodes with subitems are rendered as if they were group headers.\nThis can be used to do the grouping for an OData service on the backend and visualize this in a table.\nThis mode only makes sense if the tree has a depth of exacly 1 (group headers and entries)\n\nDefault value is <code>false<\/code>.","!type":"fn() -> Boolean","!category":"function","!static":false},"expandToLevel":{"!description":"Expands all nodes starting from the root level to the given level 'iLevel'.\n\nOnly supported with ODataModel v2, when running in OperationMode.Client or OperationMode.Auto.\nFully supported for <code>sap.ui.model.ClientTreeBinding<\/code>, e.g. if you are using a <code>sap.ui.model.json.JSONModel<\/code>.\n\nPlease also see <code>sap.ui.model.odata.OperationMode<\/code>.","!type":"fn(iLevel: Number) -> sap.ui.table.TreeTable","!category":"function","!static":false},"!description":"The TreeTable control provides a comprehensive set of features to display hierarchical data.","isIndexSelected":{"!description":"Checks if the row at the given index is selected.","!type":"fn(iRowIndex: Number) -> Boolean","!category":"function","!static":false},"getExpandFirstLevel":{"!description":"Gets current value of property <code>expandFirstLevel<\/code>.\n\nFlag to enable or disable expanding of first level.\n\nDefault value is <code>false<\/code>.","!type":"fn() -> Boolean","!category":"function","!static":false},"attachToggleOpenState":{"!description":"Attaches event handler <code>fnFunction<\/code> to the <code>toggleOpenState<\/code> event of this <code>sap.ui.table.TreeTable<\/code>.\n\nWhen called, the context of the event handler (its <code>this<\/code>) will be bound to <code>oListener<\/code> if specified, \notherwise it will be bound to this <code>sap.ui.table.TreeTable<\/code> itself.\n\nfired when a node has been expanded or collapsed (only available in hierachical mode)","!type":"fn(oData?: Object, fnFunction: fn(), oListener?: Object) -> sap.ui.table.TreeTable","!category":"function","!static":false},"setSelectedIndex":{"!description":"Overriden from Table.js base class.\nIn a TreeTable you can only select indices, which correspond to the currently visualized tree.\nInvisible tree nodes (e.g. collapsed child nodes) can not be selected via Index, because they do not\ncorrespond to a TreeTable row.","!type":"fn(iRowIndex: Number) -> sap.ui.table.TreeTable","!category":"function","!static":false},"addSelectionInterval":{"!description":"Marks a range of tree nodes as selected, starting with iFromIndex going to iToIndex.\nThe TreeNodes are referenced via their absolute row index.\nPlease be aware, that the absolute row index only applies to the the tree which is visualized by the TreeTable.\nInvisible nodes (collapsed child nodes) will not be regarded.\n\nPlease also take notice of the fact, that \"addSelectionInterval\" does not change any other selection.\nTo override the current selection, please use \"setSelctionInterval\" or for a single entry use \"setSelectedIndex\".","!type":"fn(iFromIndex: Number, iToIndex: Number) -> sap.ui.table.TreeTable","!category":"function","!static":false},"getSelectedIndex":{"!description":"Retrieves the lead selection index. The lead selection index is, among other things, used to determine the\nstart/end of a selection range, when using Shift-Click to select multiple entries at once.","!type":"fn() -> [Number]","!category":"function","!static":false},"setUseGroupMode":{"!description":"Sets a new value for property <code>useGroupMode<\/code>.\n\nIf group mode is enable nodes with subitems are rendered as if they were group headers.\nThis can be used to do the grouping for an OData service on the backend and visualize this in a table.\nThis mode only makes sense if the tree has a depth of exacly 1 (group headers and entries)\n\nWhen called with a value of <code>null<\/code> or <code>undefined<\/code>, the default value of the property will be restored.\n\nDefault value is <code>false<\/code>.","!type":"fn(bUseGroupMode: Boolean) -> sap.ui.table.TreeTable","!category":"function","!static":false},"!proto":"sap.ui.table.Table","getMetadata":{"!description":"Returns a metadata object for class sap.ui.table.TreeTable.","!type":"fn() -> sap.ui.base.Metadata","!category":"function","!static":true}},"sap.ui.table.Table":{"detachColumnVisibility":{"!description":"Detaches event handler <code>fnFunction<\/code> from the <code>columnVisibility<\/code> event of this <code>sap.ui.table.Table<\/code>.\n\nThe passed function and listener object must match the ones used for event registration.","!type":"fn(fnFunction: fn(), oListener: Object) -> sap.ui.table.Table","!category":"function","!static":false},"fireColumnResize":{"!description":"Fires event <code>columnResize<\/code> to attached listeners.\n\nListeners may prevent the default action of this event by using the <code>preventDefault<\/code>-method on the event object.\n\nExpects the following event parameters:\n<ul>\n<li><code>column<\/code> of type <code>sap.ui.table.Column<\/code>resized column.<\/li>\n<li><code>width<\/code> of type <code>sap.ui.core.CSSSize<\/code>new width of the table column as CSS Size definition.<\/li>\n<\/ul>","!type":"fn(mArguments?: Map) -> Boolean","!category":"function","!static":false},"setFooter":{"!description":"Sets the aggregated <code>footer<\/code>.","!type":"fn(vFooter: sap.ui.core.Control | String) -> sap.ui.table.Table","!category":"function","!static":false},"removeAllColumns":{"!description":"Removes all the controls from the aggregation <code>columns<\/code>.\n\nAdditionally, it unregisters them from the hosting UIArea.","!type":"fn() -> [sap.ui.table.Column]","!category":"function","!static":false},"getShowOverlay":{"!description":"Gets current value of property <code>showOverlay<\/code>.\n\nSetting this property to true will show an overlay on top of the Table content and users cannot click anymore on the Table content.\n\nDefault value is <code>false<\/code>.","!type":"fn() -> Boolean","!category":"function","!static":false},"!module":"sap/ui/table/Table","getColumns":{"!description":"Gets content of aggregation <code>columns<\/code>.\n\nColumns of the Table","!type":"fn() -> [sap.ui.table.Column]","!category":"function","!static":false},"fireColumnSelect":{"!description":"Fires event <code>columnSelect<\/code> to attached listeners.\n\nListeners may prevent the default action of this event by using the <code>preventDefault<\/code>-method on the event object.\n\nExpects the following event parameters:\n<ul>\n<li><code>column<\/code> of type <code>sap.ui.table.Column<\/code>reference to the selected column<\/li>\n<\/ul>","!type":"fn(mArguments?: Map) -> Boolean","!category":"function","!static":false},"destroyColumns":{"!description":"Destroys all the columns in the aggregation <code>columns<\/code>.","!type":"fn() -> sap.ui.table.Table","!category":"function","!static":false},"attachFilter":{"!description":"Attaches event handler <code>fnFunction<\/code> to the <code>filter<\/code> event of this <code>sap.ui.table.Table<\/code>.\n\nWhen called, the context of the event handler (its <code>this<\/code>) will be bound to <code>oListener<\/code> if specified, \notherwise it will be bound to this <code>sap.ui.table.Table<\/code> itself.\n\nfired when the table is filtered.","!type":"fn(oData?: Object, fnFunction: fn(), oListener?: Object) -> sap.ui.table.Table","!category":"function","!static":false},"setSelectionMode":{"!description":"Sets the selection mode. The current selection is lost.","!type":"fn(sSelectionMode: String)","!category":"function","!static":false},"setEditable":{"!description":"Sets a new value for property <code>editable<\/code>.\n\nFlag whether the controls of the Table are editable or not (currently this only controls the background color in certain themes!)\n\nWhen called with a value of <code>null<\/code> or <code>undefined<\/code>, the default value of the property will be restored.\n\nDefault value is <code>true<\/code>.","!type":"fn(bEditable: Boolean) -> sap.ui.table.Table","!category":"function","!static":false},"getEnableGrouping":{"!description":"Gets current value of property <code>enableGrouping<\/code>.\n\nFlag to enable or disable column grouping. (experimental!)\n\nDefault value is <code>false<\/code>.","!type":"fn() -> Boolean","!category":"function","!static":false},"getThreshold":{"!description":"Gets current value of property <code>threshold<\/code>.\n\nThe <code>threshold<\/code> defines how many additional (not yet visible records) shall be pre-fetched to enable smooth\nscrolling. The threshold is always added to the <code>visibleRowCount<\/code>. If the <code>visibleRowCount<\/code> is 10 and the\n<code>threshold<\/code> is 100, there will be 110 records fetched with the initial load.\nIf the <code>threshold<\/code> is lower than the <code>visibleRowCount<\/code>, the <code>visibleRowCount<\/code> will be used as\nthe <code>threshold<\/code>. If the value is 0 then the thresholding is disabled.\n\nDefault value is <code>100<\/code>.","!type":"fn() -> Number","!category":"function","!static":false},"getNavigationMode":{"!description":"<strong style=\"color: red;\">Deprecated! <\/strong>Since 1.38 there is no replacement, since <code>Scrollbar<\/code> is the only supported option<br>Gets current value of property <code>navigationMode<\/code>.\n\nDetermines whether a scrollbar or a paginator is used for navigation inside the table.\nIf the paginator mode is used, it requires the <code>sap.ui.commons<\/code> library.\n\nThis renders a scrollbar as a navigation element. Data fetched from an OData service is still\nloaded page-wise no matter which visual representation is used for navigation inside the table.\n\nDefault value is <code>Scrollbar<\/code>.","!type":"fn() -> sap.ui.table.NavigationMode","!category":"function","!static":false},"setEnableSelectAll":{"!description":"Sets a new value for property <code>enableSelectAll<\/code>.\n\nSpecifies if a select all button should be displayed in the top left corner. This button is only displayed\nif the row selector is visible and the selection mode is set to any kind of multi selection.\n\nWhen called with a value of <code>null<\/code> or <code>undefined<\/code>, the default value of the property will be restored.\n\nDefault value is <code>true<\/code>.","!type":"fn(bEnableSelectAll: Boolean) -> sap.ui.table.Table","!category":"function","!static":false},"getTitle":{"!description":"Gets content of aggregation <code>title<\/code>.\n\nControl or text of title section of the Table (if not set it will be hidden)","!type":"fn() -> sap.ui.core.Control | String","!category":"function","!static":false},"setThreshold":{"!description":"Sets the threshold value, which will be added to all data requests in\ncase the Table is bound against an OData service.","!type":"fn()","!category":"function","!static":false},"setColumnHeaderVisible":{"!description":"Sets a new value for property <code>columnHeaderVisible<\/code>.\n\nFlag whether the column header is visible or not.\n\nWhen called with a value of <code>null<\/code> or <code>undefined<\/code>, the default value of the property will be restored.\n\nDefault value is <code>true<\/code>.","!type":"fn(bColumnHeaderVisible: Boolean) -> sap.ui.table.Table","!category":"function","!static":false},"getAriaLabelledBy":{"!description":"Returns array of IDs of the elements which are the current targets of the association <code>ariaLabelledBy<\/code>.","!type":"fn() -> [sap.ui.core.Control]","!category":"function","!static":false},"removeRow":{"!description":"Removes a row from the aggregation <code>rows<\/code>.","!type":"fn(vRow: Number | String | sap.ui.table.Row) -> sap.ui.table.Row","!category":"function","!static":false},"addRow":{"!description":"Adds some row to the aggregation <code>rows<\/code>.","!type":"fn(oRow: sap.ui.table.Row) -> sap.ui.table.Table","!category":"function","!static":false},"setFirstVisibleRow":{"!description":"Sets a new value for property <code>firstVisibleRow<\/code>.\n\nFirst visible row.\n\nWhen called with a value of <code>null<\/code> or <code>undefined<\/code>, the default value of the property will be restored.\n\nDefault value is <code>0<\/code>.","!type":"fn(iFirstVisibleRow: Number) -> sap.ui.table.Table","!category":"function","!static":false},"getFooter":{"!description":"Gets content of aggregation <code>footer<\/code>.\n\nControl or text of footer section of the Table (if not set it will be hidden)","!type":"fn() -> sap.ui.core.Control | String","!category":"function","!static":false},"removeAllExtension":{"!description":"Removes all the controls from the aggregation <code>extension<\/code>.\n\nAdditionally, it unregisters them from the hosting UIArea.","!type":"fn() -> [sap.ui.core.Control]","!category":"function","!static":false},"getSelectedIndices":{"!description":"Zero-based indices of selected items, wrapped in an array. An empty array means \"no selection\".","!type":"fn()","!category":"function","!static":false},"getShowNoData":{"!description":"Gets current value of property <code>showNoData<\/code>.\n\nFlag whether to show the no data overlay or not once the table is empty. If set to false\nthe table will just show a grid of empty cells\n\nDefault value is <code>true<\/code>.","!type":"fn() -> Boolean","!category":"function","!static":false},"detachBusyStateChanged":{"!description":"Detaches event handler <code>fnFunction<\/code> from the <code>busyStateChanged<\/code> event of this <code>sap.ui.table.Table<\/code>.\n\nThe passed function and listener object must match the ones used for event registration.","!type":"fn(fnFunction: fn(), oListener: Object) -> sap.ui.table.Table","!category":"function","!static":false},"setEnableCellFilter":{"!description":"Sets a new value for property <code>enableCellFilter<\/code>.\n\nFlag whether to enable or disable the context menu on cells to trigger a filtering with the cell value.\n\nWhen called with a value of <code>null<\/code> or <code>undefined<\/code>, the default value of the property will be restored.\n\nDefault value is <code>false<\/code>.","!type":"fn(bEnableCellFilter: Boolean) -> sap.ui.table.Table","!category":"function","!static":false},"fireGroup":{"!description":"Fires event <code>group<\/code> to attached listeners.\n\nListeners may prevent the default action of this event by using the <code>preventDefault<\/code>-method on the event object.\n\nExpects the following event parameters:\n<ul>\n<li><code>column<\/code> of type <code>sap.ui.table.Column<\/code>grouped column.<\/li>\n<\/ul>","!type":"fn(mArguments?: Map) -> Boolean","!category":"function","!static":false},"setToolbar":{"!description":"Sets the aggregated <code>toolbar<\/code>.","!type":"fn(oToolbar: sap.ui.core.Toolbar) -> sap.ui.table.Table","!category":"function","!static":false},"setNoData":{"!description":"Sets the aggregated <code>noData<\/code>.","!type":"fn(vNoData: sap.ui.core.Control | String) -> sap.ui.table.Table","!category":"function","!static":false},"setVisibleRowCount":{"!description":"Sets a new value for property <code>visibleRowCount<\/code>.\n\nNumber of visible rows of the table.\n\nWhen called with a value of <code>null<\/code> or <code>undefined<\/code>, the default value of the property will be restored.\n\nDefault value is <code>10<\/code>.","!type":"fn(iVisibleRowCount: Number) -> sap.ui.table.Table","!category":"function","!static":false},"setFixedColumnCount":{"!description":"Sets a new value for property <code>fixedColumnCount<\/code>.\n\nNumber of columns that are fix on the left. When you use a horizontal scroll bar, only\nthe columns which are not fixed, will scroll. Fixed columns need a defined width for the feature to work.\nPlease note that the aggregated width of all fixed columns must not exceed the table width since there\nwill be no scrollbar for fixed columns.\n\nWhen called with a value of <code>null<\/code> or <code>undefined<\/code>, the default value of the property will be restored.\n\nDefault value is <code>0<\/code>.","!type":"fn(iFixedColumnCount: Number) -> sap.ui.table.Table","!category":"function","!static":false},"setEnableBusyIndicator":{"!description":"Sets a new value for property <code>enableBusyIndicator<\/code>.\n\nSet this parameter to true to make the table handle the busy indicator by its own.\nThe table will switch to busy as soon as it scrolls into an unpaged area. This feature can only\nbe used when the navigation mode is set to scrolling.\n\nWhen called with a value of <code>null<\/code> or <code>undefined<\/code>, the default value of the property will be restored.\n\nDefault value is <code>false<\/code>.","!type":"fn(bEnableBusyIndicator: Boolean) -> sap.ui.table.Table","!category":"function","!static":false},"addAriaLabelledBy":{"!description":"Adds some ariaLabelledBy into the association <code>ariaLabelledBy<\/code>.","!type":"fn(vAriaLabelledBy: String | sap.ui.core.Control) -> sap.ui.table.Table","!category":"function","!static":false},"insertColumn":{"!description":"Inserts a column into the aggregation <code>columns<\/code>.","!type":"fn(oColumn: sap.ui.table.Column, iIndex: Number) -> sap.ui.table.Table","!category":"function","!static":false},"addColumn":{"!description":"Adds some column to the aggregation <code>columns<\/code>.","!type":"fn(oColumn: sap.ui.table.Column) -> sap.ui.table.Table","!category":"function","!static":false},"destroyExtension":{"!description":"Destroys all the extension in the aggregation <code>extension<\/code>.","!type":"fn() -> sap.ui.table.Table","!category":"function","!static":false},"attachBusyStateChanged":{"!description":"Attaches event handler <code>fnFunction<\/code> to the <code>busyStateChanged<\/code> event of this <code>sap.ui.table.Table<\/code>.\n\nWhen called, the context of the event handler (its <code>this<\/code>) will be bound to <code>oListener<\/code> if specified, \notherwise it will be bound to this <code>sap.ui.table.Table<\/code> itself.\n\nThis event gets fired when the busy state of the table changes. It should only be used by composite controls.","!type":"fn(oData?: Object, fnFunction: fn(), oListener?: Object) -> sap.ui.table.Table","!category":"function","!static":false},"getFixedBottomRowCount":{"!description":"Gets current value of property <code>fixedBottomRowCount<\/code>.\n\nNumber of rows that are fix on the bottom. When you use a vertical scroll bar, only the rows which are not fixed, will scroll.\n\nDefault value is <code>0<\/code>.","!type":"fn() -> Number","!category":"function","!static":false},"attachSort":{"!description":"Attaches event handler <code>fnFunction<\/code> to the <code>sort<\/code> event of this <code>sap.ui.table.Table<\/code>.\n\nWhen called, the context of the event handler (its <code>this<\/code>) will be bound to <code>oListener<\/code> if specified, \notherwise it will be bound to this <code>sap.ui.table.Table<\/code> itself.\n\nfired when the table is sorted.","!type":"fn(oData?: Object, fnFunction: fn(), oListener?: Object) -> sap.ui.table.Table","!category":"function","!static":false},"getExtension":{"!description":"Gets content of aggregation <code>extension<\/code>.\n\nExtension section of the Table (if not set it will be hidden)","!type":"fn() -> [sap.ui.core.Control]","!category":"function","!static":false},"attachColumnSelect":{"!description":"Attaches event handler <code>fnFunction<\/code> to the <code>columnSelect<\/code> event of this <code>sap.ui.table.Table<\/code>.\n\nWhen called, the context of the event handler (its <code>this<\/code>) will be bound to <code>oListener<\/code> if specified, \notherwise it will be bound to this <code>sap.ui.table.Table<\/code> itself.\n\nfired when a column of the table has been selected","!type":"fn(oData?: Object, fnFunction: fn(), oListener?: Object) -> sap.ui.table.Table","!category":"function","!static":false},"getEnableCustomFilter":{"!description":"Gets current value of property <code>enableCustomFilter<\/code>.\n\nSet this parameter to true to implement your own filter behaviour. Instead of the filter input box a button\nwill be rendered for which' press event (customFilter) you can register an event handler.\n\nDefault value is <code>false<\/code>.","!type":"fn() -> Boolean","!category":"function","!static":false},"getSelectedIndex":{"!description":"Gets current value of property <code>selectedIndex<\/code>.\n\nZero-based index of selected item. Index value for no selection is -1.\nWhen multi-selection is enabled and multiple items are selected, the method returns\nthe lead selected item. Sets the zero-based index of the currently selected item. This method\nremoves any previous selections. When the given index is invalid, the call is ignored.\n\nDefault value is <code>-1<\/code>.","!type":"fn() -> Number","!category":"function","!static":false},"!proto":"sap.ui.core.Control","sort":{"!description":"sorts the given column ascending or descending","!type":"fn(oColumn: sap.ui.table.Column, oSortOrder: sap.ui.table.SortOrder, bAdd: Boolean) -> sap.ui.table.Table","!category":"function","!static":false},"fireCustomFilter":{"!description":"Fires event <code>customFilter<\/code> to attached listeners.","!type":"fn(mArguments?: Map) -> sap.ui.table.Table","!category":"function","!static":false},"setSelectionInterval":{"!description":"Sets the given selection interval as selection. In case of single selection the \"indexTo\" value will be used for as selected index.","!type":"fn(iIndexFrom: Number, iIndexTo: Number) -> sap.ui.table.Table","!category":"function","!static":false},"getVisibleRowCountMode":{"!description":"Gets current value of property <code>visibleRowCountMode<\/code>.\n\nThis defines how the table handles the visible rows in the table. The default behavior is,\nthat a fixed row count is defined. If you change it to auto the visibleRowCount property is\nchanged by the table automatically. It will then adjust its maximum row count to the space it is\nallowed to cover (limited by the surrounding container) and its minimum row count to the value of\nthe property minAutoRowCount (default value : 5) In manual mode the user can change\nthe visibleRowCount interactively.\n\nDefault value is <code>Fixed<\/code>.","!type":"fn() -> sap.ui.table.VisibleRowCountMode","!category":"function","!static":false},"detachRowSelectionChange":{"!description":"Detaches event handler <code>fnFunction<\/code> from the <code>rowSelectionChange<\/code> event of this <code>sap.ui.table.Table<\/code>.\n\nThe passed function and listener object must match the ones used for event registration.","!type":"fn(fnFunction: fn(), oListener: Object) -> sap.ui.table.Table","!category":"function","!static":false},"setShowColumnVisibilityMenu":{"!description":"Sets a new value for property <code>showColumnVisibilityMenu<\/code>.\n\nFlag to show or hide the column visibility menu. This menu will get displayed in each\ngenerated column header menu. It allows to show or hide columns\n\nWhen called with a value of <code>null<\/code> or <code>undefined<\/code>, the default value of the property will be restored.\n\nDefault value is <code>false<\/code>.","!type":"fn(bShowColumnVisibilityMenu: Boolean) -> sap.ui.table.Table","!category":"function","!static":false},"attachCellContextmenu":{"!description":"Attaches event handler <code>fnFunction<\/code> to the <code>cellContextmenu<\/code> event of this <code>sap.ui.table.Table<\/code>.\n\nWhen called, the context of the event handler (its <code>this<\/code>) will be bound to <code>oListener<\/code> if specified, \notherwise it will be bound to this <code>sap.ui.table.Table<\/code> itself.\n\nfired when the user clicks a cell of the table.","!type":"fn(oData?: Object, fnFunction: fn(), oListener?: Object) -> sap.ui.table.Table","!category":"function","!static":false},"bindRows":{"!description":"Binds aggregation <code>rows<\/code> to model data.\n\nSee {@link sap.ui.base.ManagedObject#bindAggregation ManagedObject.bindAggregation} for a \ndetailed description of the possible properties of <code>oBindingInfo<\/code>.","!type":"fn(oBindingInfo: Object) -> sap.ui.table.Table","!category":"function","!static":false},"getShowColumnVisibilityMenu":{"!description":"Gets current value of property <code>showColumnVisibilityMenu<\/code>.\n\nFlag to show or hide the column visibility menu. This menu will get displayed in each\ngenerated column header menu. It allows to show or hide columns\n\nDefault value is <code>false<\/code>.","!type":"fn() -> Boolean","!category":"function","!static":false},"insertRow":{"!description":"Inserts a row into the aggregation <code>rows<\/code>.","!type":"fn(oRow: sap.ui.table.Row, iIndex: Number) -> sap.ui.table.Table","!category":"function","!static":false},"getColumnHeaderVisible":{"!description":"Gets current value of property <code>columnHeaderVisible<\/code>.\n\nFlag whether the column header is visible or not.\n\nDefault value is <code>true<\/code>.","!type":"fn() -> Boolean","!category":"function","!static":false},"autoResizeColumn":{"!description":"<strong style=\"color: red;\">Experimental! <\/strong>","!type":"fn(iColId: Number)","!category":"function","!static":false},"setGroupBy":{"!description":"Sets the associated <code>groupBy<\/code>.","!type":"fn(oGroupBy: sap.ui.table.Column) -> sap.ui.table.Table","!category":"function","!static":false},"getVisibleRowCount":{"!description":"Gets current value of property <code>visibleRowCount<\/code>.\n\nNumber of visible rows of the table.\n\nDefault value is <code>10<\/code>.","!type":"fn() -> Number","!category":"function","!static":false},"!category":"class","addExtension":{"!description":"Adds some extension to the aggregation <code>extension<\/code>.","!type":"fn(oExtension: sap.ui.core.Control) -> sap.ui.table.Table","!category":"function","!static":false},"fireFilter":{"!description":"Fires event <code>filter<\/code> to attached listeners.\n\nListeners may prevent the default action of this event by using the <code>preventDefault<\/code>-method on the event object.\n\nExpects the following event parameters:\n<ul>\n<li><code>column<\/code> of type <code>sap.ui.table.Column<\/code>filtered column.<\/li>\n<li><code>value<\/code> of type <code>string<\/code>filter value.<\/li>\n<\/ul>","!type":"fn(mArguments?: Map) -> Boolean","!category":"function","!static":false},"setEnableColumnReordering":{"!description":"Sets a new value for property <code>enableColumnReordering<\/code>.\n\nFlag to enable or disable column reordering\n\nWhen called with a value of <code>null<\/code> or <code>undefined<\/code>, the default value of the property will be restored.\n\nDefault value is <code>true<\/code>.","!type":"fn(bEnableColumnReordering: Boolean) -> sap.ui.table.Table","!category":"function","!static":false},"getEnableColumnFreeze":{"!description":"Gets current value of property <code>enableColumnFreeze<\/code>.\n\nFlag whether to show or hide the column menu item to freeze or unfreeze a column.\n\nDefault value is <code>false<\/code>.","!type":"fn() -> Boolean","!category":"function","!static":false},"removeAllRows":{"!description":"Removes all the controls from the aggregation <code>rows<\/code>.\n\nAdditionally, it unregisters them from the hosting UIArea.","!type":"fn() -> [sap.ui.table.Row]","!category":"function","!static":false},"exportData":{"!description":"<strong style=\"color: red;\">Experimental! <\/strong>","!type":"fn(mSettings: Object) -> Promise","!category":"function","!static":false},"detachSort":{"!description":"Detaches event handler <code>fnFunction<\/code> from the <code>sort<\/code> event of this <code>sap.ui.table.Table<\/code>.\n\nThe passed function and listener object must match the ones used for event registration.","!type":"fn(fnFunction: fn(), oListener: Object) -> sap.ui.table.Table","!category":"function","!static":false},"getMinAutoRowCount":{"!description":"Gets current value of property <code>minAutoRowCount<\/code>.\n\nThis property is used to set the minimum count of visible rows when the property visibleRowCountMode is set to Auto or Interactive.\nFor any other visibleRowCountMode, it is ignored.\n\nDefault value is <code>5<\/code>.","!type":"fn() -> Number","!category":"function","!static":false},"clearSelection":{"!description":"Removes complete selection.","!type":"fn() -> sap.ui.table.Table","!category":"function","!static":false},"removeAllAriaLabelledBy":{"!description":"Removes all the controls in the association named <code>ariaLabelledBy<\/code>.","!type":"fn() -> [sap.ui.core.Control]","!category":"function","!static":false},"detachCustomFilter":{"!description":"Detaches event handler <code>fnFunction<\/code> from the <code>customFilter<\/code> event of this <code>sap.ui.table.Table<\/code>.\n\nThe passed function and listener object must match the ones used for event registration.","!type":"fn(fnFunction: fn(), oListener: Object) -> sap.ui.table.Table","!category":"function","!static":false},"getNoData":{"!description":"Gets content of aggregation <code>noData<\/code>.\n\nThe value for the noData aggregation can be either a string value or a control instance.\nThe control is shown, in case there is no data for the Table available. In case of a string\nvalue this will simply replace the no data text.","!type":"fn() -> sap.ui.core.Control | String","!category":"function","!static":false},"destroyToolbar":{"!description":"Destroys the toolbar in the aggregation <code>toolbar<\/code>.","!type":"fn() -> sap.ui.table.Table","!category":"function","!static":false},"!description":"<p>\n    Provides a comprehensive set of features for displaying and dealing with vast amounts of data. The Table control supports\n    desktop PCs and tablet devices. On tablets, special consideration should be given to the number of visible columns\n    and rows due to the limited performance of some devices.\n<\/p>\n<p>\n    In order to keep the document DOM as lean as possible, the Table control reuses its DOM elements of the rows.\n    When the user scrolls, only the row contexts are changed but the rendered controls remain the same. This allows\n    the Table control to handle huge amounts of data. Nevertheless, restrictions apply regarding the number of displayed\n    columns. Keep the number as low as possible to improve performance. Due to the nature of tables, the used\n    control for column templates also has a big influence on the performance.\n<\/p>\n<p>\n    The Table control relies completely on data binding, and its supported feature set is tightly coupled to\n    the data model and binding being used.\n<\/p>","fireRowSelectionChange":{"!description":"Fires event <code>rowSelectionChange<\/code> to attached listeners.\n\nExpects the following event parameters:\n<ul>\n<li><code>rowIndex<\/code> of type <code>int<\/code>row index which has been clicked so that the selection has been changed (either selected or deselected)<\/li>\n<li><code>rowContext<\/code> of type <code>object<\/code>binding context of the row which has been clicked so that selection has been changed<\/li>\n<li><code>rowIndices<\/code> of type <code>int[]<\/code>array of row indices which selection has been changed (either selected or deselected)<\/li>\n<li><code>selectAll<\/code> of type <code>boolean<\/code>indicator if \"select all\" function is used to select rows<\/li>\n<li><code>userInteraction<\/code> of type <code>boolean<\/code>indicates that the event was fired due to an explicit user interaction like clicking the row header\nor using the keyboard (SPACE or ENTER) to select a row or a range of rows.<\/li>\n<\/ul>","!type":"fn(mArguments?: Map) -> sap.ui.table.Table","!category":"function","!static":false},"getEnableBusyIndicator":{"!description":"Gets current value of property <code>enableBusyIndicator<\/code>.\n\nSet this parameter to true to make the table handle the busy indicator by its own.\nThe table will switch to busy as soon as it scrolls into an unpaged area. This feature can only\nbe used when the navigation mode is set to scrolling.\n\nDefault value is <code>false<\/code>.","!type":"fn() -> Boolean","!category":"function","!static":false},"setSelectedIndex":{"!description":"Sets a new value for property <code>selectedIndex<\/code>.\n\nZero-based index of selected item. Index value for no selection is -1.\nWhen multi-selection is enabled and multiple items are selected, the method returns\nthe lead selected item. Sets the zero-based index of the currently selected item. This method\nremoves any previous selections. When the given index is invalid, the call is ignored.\n\nWhen called with a value of <code>null<\/code> or <code>undefined<\/code>, the default value of the property will be restored.\n\nDefault value is <code>-1<\/code>.","!type":"fn(iSelectedIndex: Number) -> sap.ui.table.Table","!category":"function","!static":false},"setRowHeight":{"!description":"Sets a new value for property <code>rowHeight<\/code>.\n\nHeight of a row of the Table in pixel.\n\nWhen called with a value of <code>null<\/code> or <code>undefined<\/code>, the default value of the property will be restored.","!type":"fn(iRowHeight: Number) -> sap.ui.table.Table","!category":"function","!static":false},"addSelectionInterval":{"!description":"Adds the given selection interval to the selection. In case of single selection the \"indexTo\" value will be used for as selected index.","!type":"fn(iIndexFrom: Number, iIndexTo: Number) -> sap.ui.table.Table","!category":"function","!static":false},"detachColumnResize":{"!description":"Detaches event handler <code>fnFunction<\/code> from the <code>columnResize<\/code> event of this <code>sap.ui.table.Table<\/code>.\n\nThe passed function and listener object must match the ones used for event registration.","!type":"fn(fnFunction: fn(), oListener: Object) -> sap.ui.table.Table","!category":"function","!static":false},"detachCellContextmenu":{"!description":"Detaches event handler <code>fnFunction<\/code> from the <code>cellContextmenu<\/code> event of this <code>sap.ui.table.Table<\/code>.\n\nThe passed function and listener object must match the ones used for event registration.","!type":"fn(fnFunction: fn(), oListener: Object) -> sap.ui.table.Table","!category":"function","!static":false},"getMetadata":{"!description":"Returns a metadata object for class sap.ui.table.Table.","!type":"fn() -> sap.ui.base.Metadata","!category":"function","!static":true},"detachFilter":{"!description":"Detaches event handler <code>fnFunction<\/code> from the <code>filter<\/code> event of this <code>sap.ui.table.Table<\/code>.\n\nThe passed function and listener object must match the ones used for event registration.","!type":"fn(fnFunction: fn(), oListener: Object) -> sap.ui.table.Table","!category":"function","!static":false},"attachColumnFreeze":{"!description":"Attaches event handler <code>fnFunction<\/code> to the <code>columnFreeze<\/code> event of this <code>sap.ui.table.Table<\/code>.\n\nWhen called, the context of the event handler (its <code>this<\/code>) will be bound to <code>oListener<\/code> if specified, \notherwise it will be bound to this <code>sap.ui.table.Table<\/code> itself.\n\nfired when a column of the table should be freezed","!type":"fn(oData?: Object, fnFunction: fn(), oListener?: Object) -> sap.ui.table.Table","!category":"function","!static":false},"removeAriaLabelledBy":{"!description":"Removes an ariaLabelledBy from the association named <code>ariaLabelledBy<\/code>.","!type":"fn(vAriaLabelledBy: Number | String | sap.ui.core.Control) -> sap.ui.core.Control","!category":"function","!static":false},"attachRowSelectionChange":{"!description":"Attaches event handler <code>fnFunction<\/code> to the <code>rowSelectionChange<\/code> event of this <code>sap.ui.table.Table<\/code>.\n\nWhen called, the context of the event handler (its <code>this<\/code>) will be bound to <code>oListener<\/code> if specified, \notherwise it will be bound to this <code>sap.ui.table.Table<\/code> itself.\n\nfired when the row selection of the table has been changed (the event parameters can be used to determine\nselection changes - to find out the selected rows you should better use the table selection API)","!type":"fn(oData?: Object, fnFunction: fn(), oListener?: Object) -> sap.ui.table.Table","!category":"function","!static":false},"removeExtension":{"!description":"Removes a extension from the aggregation <code>extension<\/code>.","!type":"fn(vExtension: Number | String | sap.ui.core.Control) -> sap.ui.core.Control","!category":"function","!static":false},"setFixedRowCount":{"!description":"Sets a new value for property <code>fixedRowCount<\/code>.\n\nNumber of rows that are fix on the top. When you use a vertical scroll bar, only the rows which are not fixed, will scroll.\n\nWhen called with a value of <code>null<\/code> or <code>undefined<\/code>, the default value of the property will be restored.\n\nDefault value is <code>0<\/code>.","!type":"fn(iFixedRowCount: Number) -> sap.ui.table.Table","!category":"function","!static":false},"removeColumn":{"!description":"Removes a column from the aggregation <code>columns<\/code>.","!type":"fn(vColumn: Number | String | sap.ui.table.Column) -> sap.ui.table.Column","!category":"function","!static":false},"getSelectionBehavior":{"!description":"Gets current value of property <code>selectionBehavior<\/code>.\n\nSelection behavior of the Table. This property defines whether the row selector is displayed and whether the row, the row selector or both\ncan be clicked to select a row.\n\nDefault value is <code>RowSelector<\/code>.","!type":"fn() -> sap.ui.table.SelectionBehavior","!category":"function","!static":false},"attachCellClick":{"!description":"Attaches event handler <code>fnFunction<\/code> to the <code>cellClick<\/code> event of this <code>sap.ui.table.Table<\/code>.\n\nWhen called, the context of the event handler (its <code>this<\/code>) will be bound to <code>oListener<\/code> if specified, \notherwise it will be bound to this <code>sap.ui.table.Table<\/code> itself.\n\nfired when the user clicks a cell of the table (experimental!).","!type":"fn(oData?: Object, fnFunction: fn(), oListener?: Object) -> sap.ui.table.Table","!category":"function","!static":false},"getContextByIndex":{"!description":"Returns the context of a row by its index. Please note that for server-based models like OData,\nthe supplied index might not have been loaded yet. If the context is not available at the client,\nthe binding will trigger a backend request and request this single context. Although this API\nlooks synchronous it may not return a context but load it and fire a change event on the binding.\n\nFor server-based models you should consider to only make this API call when the index is within\nthe currently visible scroll area.","!type":"fn(iIndex: Number) -> Object","!category":"function","!static":false},"setTooltip":{"!description":"Sets a new tooltip for this object. The tooltip can either be a simple string\n(which in most cases will be rendered as the <code>title<\/code> attribute of this\nElement) or an instance of {@link sap.ui.core.TooltipBase}.\n\nIf a new tooltip is set, any previously set tooltip is deactivated.\n\nPlease note that tooltips are not rendered for the table. The tooltip property will be set\nbut it won't effect the DOM.","!type":"fn(vTooltip: String | sap.ui.core.TooltipBase) -> sap.ui.table.Table","!category":"function","!static":false},"setVisibleRowCountMode":{"!description":"Sets a new value for property <code>visibleRowCountMode<\/code>.\n\nThis defines how the table handles the visible rows in the table. The default behavior is,\nthat a fixed row count is defined. If you change it to auto the visibleRowCount property is\nchanged by the table automatically. It will then adjust its maximum row count to the space it is\nallowed to cover (limited by the surrounding container) and its minimum row count to the value of\nthe property minAutoRowCount (default value : 5) In manual mode the user can change\nthe visibleRowCount interactively.\n\nWhen called with a value of <code>null<\/code> or <code>undefined<\/code>, the default value of the property will be restored.\n\nDefault value is <code>Fixed<\/code>.","!type":"fn(sVisibleRowCountMode: sap.ui.table.VisibleRowCountMode) -> sap.ui.table.Table","!category":"function","!static":false},"getWidth":{"!description":"Gets current value of property <code>width<\/code>.\n\nWidth of the Table.\n\nDefault value is <code>auto<\/code>.","!type":"fn() -> sap.ui.core.CSSSize","!category":"function","!static":false},"setEnableColumnFreeze":{"!description":"Sets a new value for property <code>enableColumnFreeze<\/code>.\n\nFlag whether to show or hide the column menu item to freeze or unfreeze a column.\n\nWhen called with a value of <code>null<\/code> or <code>undefined<\/code>, the default value of the property will be restored.\n\nDefault value is <code>false<\/code>.","!type":"fn(bEnableColumnFreeze: Boolean) -> sap.ui.table.Table","!category":"function","!static":false},"unbindRows":{"!description":"Unbinds aggregation <code>rows<\/code> from model data.","!type":"fn() -> sap.ui.table.Table","!category":"function","!static":false},"attachColumnVisibility":{"!description":"Attaches event handler <code>fnFunction<\/code> to the <code>columnVisibility<\/code> event of this <code>sap.ui.table.Table<\/code>.\n\nWhen called, the context of the event handler (its <code>this<\/code>) will be bound to <code>oListener<\/code> if specified, \notherwise it will be bound to this <code>sap.ui.table.Table<\/code> itself.\n\nfired when the visibility of a table column is changed.","!type":"fn(oData?: Object, fnFunction: fn(), oListener?: Object) -> sap.ui.table.Table","!category":"function","!static":false},"getEnableColumnReordering":{"!description":"Gets current value of property <code>enableColumnReordering<\/code>.\n\nFlag to enable or disable column reordering\n\nDefault value is <code>true<\/code>.","!type":"fn() -> Boolean","!category":"function","!static":false},"getEditable":{"!description":"Gets current value of property <code>editable<\/code>.\n\nFlag whether the controls of the Table are editable or not (currently this only controls the background color in certain themes!)\n\nDefault value is <code>true<\/code>.","!type":"fn() -> Boolean","!category":"function","!static":false},"attachColumnMove":{"!description":"Attaches event handler <code>fnFunction<\/code> to the <code>columnMove<\/code> event of this <code>sap.ui.table.Table<\/code>.\n\nWhen called, the context of the event handler (its <code>this<\/code>) will be bound to <code>oListener<\/code> if specified, \notherwise it will be bound to this <code>sap.ui.table.Table<\/code> itself.\n\nfired when a table column is moved.","!type":"fn(oData?: Object, fnFunction: fn(), oListener?: Object) -> sap.ui.table.Table","!category":"function","!static":false},"fireBusyStateChanged":{"!description":"Fires event <code>busyStateChanged<\/code> to attached listeners.","!type":"fn(mArguments?: Map) -> sap.ui.table.Table","!category":"function","!static":false},"detachColumnSelect":{"!description":"Detaches event handler <code>fnFunction<\/code> from the <code>columnSelect<\/code> event of this <code>sap.ui.table.Table<\/code>.\n\nThe passed function and listener object must match the ones used for event registration.","!type":"fn(fnFunction: fn(), oListener: Object) -> sap.ui.table.Table","!category":"function","!static":false},"getSortedColumns":{"!description":"gets sorted columns","!type":"fn()","!category":"function","!static":false},"attachCustomFilter":{"!description":"Attaches event handler <code>fnFunction<\/code> to the <code>customFilter<\/code> event of this <code>sap.ui.table.Table<\/code>.\n\nWhen called, the context of the event handler (its <code>this<\/code>) will be bound to <code>oListener<\/code> if specified, \notherwise it will be bound to this <code>sap.ui.table.Table<\/code> itself.\n\nThis event is triggered when the custom filter item of the column menu is pressed. The column on which the event was triggered is passed as parameter.","!type":"fn(oData?: Object, fnFunction: fn(), oListener?: Object) -> sap.ui.table.Table","!category":"function","!static":false},"setShowOverlay":{"!description":"Sets a new value for property <code>showOverlay<\/code>.\n\nSetting this property to true will show an overlay on top of the Table content and users cannot click anymore on the Table content.\n\nWhen called with a value of <code>null<\/code> or <code>undefined<\/code>, the default value of the property will be restored.\n\nDefault value is <code>false<\/code>.","!type":"fn(bShowOverlay: Boolean) -> sap.ui.table.Table","!category":"function","!static":false},"getToolbar":{"!description":"Gets content of aggregation <code>toolbar<\/code>.\n\nToolbar of the Table (if not set it will be hidden)","!type":"fn() -> sap.ui.core.Toolbar","!category":"function","!static":false},"detachColumnMove":{"!description":"Detaches event handler <code>fnFunction<\/code> from the <code>columnMove<\/code> event of this <code>sap.ui.table.Table<\/code>.\n\nThe passed function and listener object must match the ones used for event registration.","!type":"fn(fnFunction: fn(), oListener: Object) -> sap.ui.table.Table","!category":"function","!static":false},"!constructorDescription":"Constructor for a new Table.\n\n\nAccepts an object literal <code>mSettings<\/code> that defines initial\nproperty values, aggregated and associated objects as well as event handlers.\nSee {@link sap.ui.base.ManagedObject#constructor} for a general description of the syntax of the settings object.\n\nThe supported settings are:\n<ul>\n<li>Properties\n<ul>\n<li>{@link #getWidth width} : sap.ui.core.CSSSize (default: auto)<\/li>\n<li>{@link #getRowHeight rowHeight} : int<\/li>\n<li>{@link #getColumnHeaderHeight columnHeaderHeight} : int<\/li>\n<li>{@link #getColumnHeaderVisible columnHeaderVisible} : boolean (default: true)<\/li>\n<li>{@link #getVisibleRowCount visibleRowCount} : int (default: 10)<\/li>\n<li>{@link #getFirstVisibleRow firstVisibleRow} : int (default: 0)<\/li>\n<li>{@link #getSelectionMode selectionMode} : sap.ui.table.SelectionMode (default: MultiToggle)<\/li>\n<li>{@link #getSelectionBehavior selectionBehavior} : sap.ui.table.SelectionBehavior (default: RowSelector)<\/li>\n<li>{@link #getSelectedIndex selectedIndex} : int (default: -1)<\/li>\n<li>{@link #getEditable editable} : boolean (default: true)<\/li>\n<li>{@link #getNavigationMode navigationMode} : sap.ui.table.NavigationMode (default: Scrollbar)<\/li>\n<li>{@link #getThreshold threshold} : int (default: 100)<\/li>\n<li>{@link #getEnableColumnReordering enableColumnReordering} : boolean (default: true)<\/li>\n<li>{@link #getEnableGrouping enableGrouping} : boolean (default: false)<\/li>\n<li>{@link #getShowColumnVisibilityMenu showColumnVisibilityMenu} : boolean (default: false)<\/li>\n<li>{@link #getShowNoData showNoData} : boolean (default: true)<\/li>\n<li>{@link #getVisibleRowCountMode visibleRowCountMode} : sap.ui.table.VisibleRowCountMode (default: Fixed)<\/li>\n<li>{@link #getMinAutoRowCount minAutoRowCount} : int (default: 5)<\/li>\n<li>{@link #getFixedColumnCount fixedColumnCount} : int (default: 0)<\/li>\n<li>{@link #getFixedRowCount fixedRowCount} : int (default: 0)<\/li>\n<li>{@link #getFixedBottomRowCount fixedBottomRowCount} : int (default: 0)<\/li>\n<li>{@link #getEnableColumnFreeze enableColumnFreeze} : boolean (default: false)<\/li>\n<li>{@link #getEnableCellFilter enableCellFilter} : boolean (default: false)<\/li>\n<li>{@link #getShowOverlay showOverlay} : boolean (default: false)<\/li>\n<li>{@link #getEnableSelectAll enableSelectAll} : boolean (default: true)<\/li>\n<li>{@link #getEnableCustomFilter enableCustomFilter} : boolean (default: false)<\/li>\n<li>{@link #getEnableBusyIndicator enableBusyIndicator} : boolean (default: false)<\/li>\n<\/ul>\n<\/li>\n<li>Aggregations\n<ul>\n<li>{@link #getTitle title} : sap.ui.core.Control|string<\/li>\n<li>{@link #getFooter footer} : sap.ui.core.Control|string<\/li>\n<li>{@link #getToolbar toolbar} : sap.ui.core.Toolbar<\/li>\n<li>{@link #getExtension extension} : sap.ui.core.Control[]<\/li>\n<li>{@link #getColumns columns} : sap.ui.table.Column[] (default)<\/li>\n<li>{@link #getRows rows} : sap.ui.table.Row[]<\/li>\n<li>{@link #getNoData noData} : sap.ui.core.Control|string<\/li>\n<\/ul>\n<\/li>\n<li>Events\n<ul>\n<li>{@link #event:rowSelectionChange rowSelectionChange} : fnListenerFunction or [fnListenerFunction, oListenerObject] or [oData, fnListenerFunction, oListenerObject]<\/li>\n<li>{@link #event:columnSelect columnSelect} : fnListenerFunction or [fnListenerFunction, oListenerObject] or [oData, fnListenerFunction, oListenerObject]<\/li>\n<li>{@link #event:columnResize columnResize} : fnListenerFunction or [fnListenerFunction, oListenerObject] or [oData, fnListenerFunction, oListenerObject]<\/li>\n<li>{@link #event:columnMove columnMove} : fnListenerFunction or [fnListenerFunction, oListenerObject] or [oData, fnListenerFunction, oListenerObject]<\/li>\n<li>{@link #event:sort sort} : fnListenerFunction or [fnListenerFunction, oListenerObject] or [oData, fnListenerFunction, oListenerObject]<\/li>\n<li>{@link #event:filter filter} : fnListenerFunction or [fnListenerFunction, oListenerObject] or [oData, fnListenerFunction, oListenerObject]<\/li>\n<li>{@link #event:group group} : fnListenerFunction or [fnListenerFunction, oListenerObject] or [oData, fnListenerFunction, oListenerObject]<\/li>\n<li>{@link #event:columnVisibility columnVisibility} : fnListenerFunction or [fnListenerFunction, oListenerObject] or [oData, fnListenerFunction, oListenerObject]<\/li>\n<li>{@link #event:cellClick cellClick} : fnListenerFunction or [fnListenerFunction, oListenerObject] or [oData, fnListenerFunction, oListenerObject]<\/li>\n<li>{@link #event:cellContextmenu cellContextmenu} : fnListenerFunction or [fnListenerFunction, oListenerObject] or [oData, fnListenerFunction, oListenerObject]<\/li>\n<li>{@link #event:columnFreeze columnFreeze} : fnListenerFunction or [fnListenerFunction, oListenerObject] or [oData, fnListenerFunction, oListenerObject]<\/li>\n<li>{@link #event:customFilter customFilter} : fnListenerFunction or [fnListenerFunction, oListenerObject] or [oData, fnListenerFunction, oListenerObject]<\/li>\n<li>{@link #event:firstVisibleRowChanged firstVisibleRowChanged} : fnListenerFunction or [fnListenerFunction, oListenerObject] or [oData, fnListenerFunction, oListenerObject]<\/li>\n<li>{@link #event:busyStateChanged busyStateChanged} : fnListenerFunction or [fnListenerFunction, oListenerObject] or [oData, fnListenerFunction, oListenerObject]<\/li>\n<\/ul>\n<\/li>\n<\/ul>\n\nIn addition, all settings applicable to the base type {@link sap.ui.core.Control#constructor sap.ui.core.Control}\ncan be used as well.","fireFirstVisibleRowChanged":{"!description":"Fires event <code>firstVisibleRowChanged<\/code> to attached listeners.","!type":"fn(mArguments?: Map) -> sap.ui.table.Table","!category":"function","!static":false},"fireCellContextmenu":{"!description":"Fires event <code>cellContextmenu<\/code> to attached listeners.\n\nListeners may prevent the default action of this event by using the <code>preventDefault<\/code>-method on the event object.\n\nExpects the following event parameters:\n<ul>\n<li><code>cellControl<\/code> of type <code>sap.ui.core.Control<\/code>The control of the cell.<\/li>\n<li><code>cellDomRef<\/code> of type <code>Object<\/code>DOM reference of the clicked cell. Can be used to position the context menu.<\/li>\n<li><code>rowIndex<\/code> of type <code>int<\/code>Row index of the selected cell.<\/li>\n<li><code>columnIndex<\/code> of type <code>int<\/code>Column index of the selected cell. This is the index of visible columns and might differ from\nthe index maintained in the column aggregation.<\/li>\n<li><code>columnId<\/code> of type <code>string<\/code>Column ID of the selected cell.<\/li>\n<li><code>rowBindingContext<\/code> of type <code>sap.ui.model.Context<\/code>Row binding context of the selected cell.<\/li>\n<\/ul>","!type":"fn(mArguments?: Map) -> Boolean","!category":"function","!static":false},"indexOfColumn":{"!description":"Checks for the provided <code>sap.ui.table.Column<\/code> in the aggregation <code>columns<\/code>.\nand returns its index if found or -1 otherwise.","!type":"fn(oColumn: sap.ui.table.Column) -> Number","!category":"function","!static":false},"destroyTitle":{"!description":"Destroys the title in the aggregation <code>title<\/code>.","!type":"fn() -> sap.ui.table.Table","!category":"function","!static":false},"fireColumnMove":{"!description":"Fires event <code>columnMove<\/code> to attached listeners.\n\nListeners may prevent the default action of this event by using the <code>preventDefault<\/code>-method on the event object.\n\nExpects the following event parameters:\n<ul>\n<li><code>column<\/code> of type <code>sap.ui.table.Column<\/code>moved column.<\/li>\n<li><code>newPos<\/code> of type <code>int<\/code>new position of the column.<\/li>\n<\/ul>","!type":"fn(mArguments?: Map) -> Boolean","!category":"function","!static":false},"detachFirstVisibleRowChanged":{"!description":"Detaches event handler <code>fnFunction<\/code> from the <code>firstVisibleRowChanged<\/code> event of this <code>sap.ui.table.Table<\/code>.\n\nThe passed function and listener object must match the ones used for event registration.","!type":"fn(fnFunction: fn(), oListener: Object) -> sap.ui.table.Table","!category":"function","!static":false},"setTitle":{"!description":"Sets the aggregated <code>title<\/code>.","!type":"fn(vTitle: sap.ui.core.Control | String) -> sap.ui.table.Table","!category":"function","!static":false},"setFixedBottomRowCount":{"!description":"Sets a new value for property <code>fixedBottomRowCount<\/code>.\n\nNumber of rows that are fix on the bottom. When you use a vertical scroll bar, only the rows which are not fixed, will scroll.\n\nWhen called with a value of <code>null<\/code> or <code>undefined<\/code>, the default value of the property will be restored.\n\nDefault value is <code>0<\/code>.","!type":"fn(iFixedBottomRowCount: Number) -> sap.ui.table.Table","!category":"function","!static":false},"isIndexSelected":{"!description":"Returns whether the given index is selected.","!type":"fn(iIndex: Number) -> Boolean","!category":"function","!static":false},"setColumnHeaderHeight":{"!description":"Sets a new value for property <code>columnHeaderHeight<\/code>.\n\nHeight of the column header of the Table in pixel.\n\nWhen called with a value of <code>null<\/code> or <code>undefined<\/code>, the default value of the property will be restored.","!type":"fn(iColumnHeaderHeight: Number) -> sap.ui.table.Table","!category":"function","!static":false},"getFixedColumnCount":{"!description":"Gets current value of property <code>fixedColumnCount<\/code>.\n\nNumber of columns that are fix on the left. When you use a horizontal scroll bar, only\nthe columns which are not fixed, will scroll. Fixed columns need a defined width for the feature to work.\nPlease note that the aggregated width of all fixed columns must not exceed the table width since there\nwill be no scrollbar for fixed columns.\n\nDefault value is <code>0<\/code>.","!type":"fn() -> Number","!category":"function","!static":false},"filter":{"!description":"filter the given column by the given value","!type":"fn(oColumn: sap.ui.table.Column, sValue: String) -> sap.ui.table.Table","!category":"function","!static":false},"unbindColumns":{"!description":"Unbinds aggregation <code>columns<\/code> from model data.","!type":"fn() -> sap.ui.table.Table","!category":"function","!static":false},"fireSort":{"!description":"Fires event <code>sort<\/code> to attached listeners.\n\nListeners may prevent the default action of this event by using the <code>preventDefault<\/code>-method on the event object.\n\nExpects the following event parameters:\n<ul>\n<li><code>column<\/code> of type <code>sap.ui.table.Column<\/code>sorted column.<\/li>\n<li><code>sortOrder<\/code> of type <code>sap.ui.table.SortOrder<\/code>Sort Order<\/li>\n<li><code>columnAdded<\/code> of type <code>boolean<\/code>If column was added to sorter this is true. If new sort is started this is set to false<\/li>\n<\/ul>","!type":"fn(mArguments?: Map) -> Boolean","!category":"function","!static":false},"detachGroup":{"!description":"Detaches event handler <code>fnFunction<\/code> from the <code>group<\/code> event of this <code>sap.ui.table.Table<\/code>.\n\nThe passed function and listener object must match the ones used for event registration.","!type":"fn(fnFunction: fn(), oListener: Object) -> sap.ui.table.Table","!category":"function","!static":false},"setShowNoData":{"!description":"Sets a new value for property <code>showNoData<\/code>.\n\nFlag whether to show the no data overlay or not once the table is empty. If set to false\nthe table will just show a grid of empty cells\n\nWhen called with a value of <code>null<\/code> or <code>undefined<\/code>, the default value of the property will be restored.\n\nDefault value is <code>true<\/code>.","!type":"fn(bShowNoData: Boolean) -> sap.ui.table.Table","!category":"function","!static":false},"detachCellClick":{"!description":"Detaches event handler <code>fnFunction<\/code> from the <code>cellClick<\/code> event of this <code>sap.ui.table.Table<\/code>.\n\nThe passed function and listener object must match the ones used for event registration.","!type":"fn(fnFunction: fn(), oListener: Object) -> sap.ui.table.Table","!category":"function","!static":false},"getSelectionMode":{"!description":"Gets current value of property <code>selectionMode<\/code>.\n\nSelection mode of the Table. This property controls whether single or multiple rows can be selected and\nhow the selection can be extended. It may also influence the visual appearance.\n\nDefault value is <code>MultiToggle<\/code>.","!type":"fn() -> sap.ui.table.SelectionMode","!category":"function","!static":false},"destroyFooter":{"!description":"Destroys the footer in the aggregation <code>footer<\/code>.","!type":"fn() -> sap.ui.table.Table","!category":"function","!static":false},"setNavigationMode":{"!description":"<strong style=\"color: red;\">Deprecated! <\/strong>Since 1.38 there is no replacement, since <code>Scrollbar<\/code> is the only supported option<br>Sets a new value for property <code>navigationMode<\/code>.\n\nDetermines whether a scrollbar or a paginator is used for navigation inside the table.\nIf the paginator mode is used, it requires the <code>sap.ui.commons<\/code> library.\n\nThis renders a scrollbar as a navigation element. Data fetched from an OData service is still\nloaded page-wise no matter which visual representation is used for navigation inside the table.\n\nWhen called with a value of <code>null<\/code> or <code>undefined<\/code>, the default value of the property will be restored.\n\nDefault value is <code>Scrollbar<\/code>.","!type":"fn(sNavigationMode: sap.ui.table.NavigationMode) -> sap.ui.table.Table","!category":"function","!static":false},"indexOfExtension":{"!description":"Checks for the provided <code>sap.ui.core.Control<\/code> in the aggregation <code>extension<\/code>.\nand returns its index if found or -1 otherwise.","!type":"fn(oExtension: sap.ui.core.Control) -> Number","!category":"function","!static":false},"attachGroup":{"!description":"Attaches event handler <code>fnFunction<\/code> to the <code>group<\/code> event of this <code>sap.ui.table.Table<\/code>.\n\nWhen called, the context of the event handler (its <code>this<\/code>) will be bound to <code>oListener<\/code> if specified, \notherwise it will be bound to this <code>sap.ui.table.Table<\/code> itself.\n\nfired when the table is grouped (experimental!).","!type":"fn(oData?: Object, fnFunction: fn(), oListener?: Object) -> sap.ui.table.Table","!category":"function","!static":false},"getRows":{"!description":"Gets content of aggregation <code>rows<\/code>.\n\nRows of the Table","!type":"fn() -> [sap.ui.table.Row]","!category":"function","!static":false},"setSelectionBehavior":{"!description":"Sets a new value for property <code>selectionBehavior<\/code>.\n\nSelection behavior of the Table. This property defines whether the row selector is displayed and whether the row, the row selector or both\ncan be clicked to select a row.\n\nWhen called with a value of <code>null<\/code> or <code>undefined<\/code>, the default value of the property will be restored.\n\nDefault value is <code>RowSelector<\/code>.","!type":"fn(sSelectionBehavior: sap.ui.table.SelectionBehavior) -> sap.ui.table.Table","!category":"function","!static":false},"setWidth":{"!description":"Sets a new value for property <code>width<\/code>.\n\nWidth of the Table.\n\nWhen called with a value of <code>null<\/code> or <code>undefined<\/code>, the default value of the property will be restored.\n\nDefault value is <code>auto<\/code>.","!type":"fn(sWidth: sap.ui.core.CSSSize) -> sap.ui.table.Table","!category":"function","!static":false},"destroyNoData":{"!description":"Destroys the noData in the aggregation <code>noData<\/code>.","!type":"fn() -> sap.ui.table.Table","!category":"function","!static":false},"removeSelectionInterval":{"!description":"Removes the given selection interval from the selection. In case of single selection this call removeSelectedIndex with the \"indexTo\" value.","!type":"fn(iIndexFrom: Number, iIndexTo: Number) -> sap.ui.table.Table","!category":"function","!static":false},"fireCellClick":{"!description":"Fires event <code>cellClick<\/code> to attached listeners.\n\nListeners may prevent the default action of this event by using the <code>preventDefault<\/code>-method on the event object.\n\nExpects the following event parameters:\n<ul>\n<li><code>cellControl<\/code> of type <code>sap.ui.core.Control<\/code>The control of the cell.<\/li>\n<li><code>cellDomRef<\/code> of type <code>Object<\/code>DOM reference of the clicked cell. Can be used to position the context menu.<\/li>\n<li><code>rowIndex<\/code> of type <code>int<\/code>Row index of the selected cell.<\/li>\n<li><code>columnIndex<\/code> of type <code>int<\/code>Column index of the selected cell. This is the index of visible columns and might differ from\nthe index maintained in the column aggregation.<\/li>\n<li><code>columnId<\/code> of type <code>string<\/code>Column ID of the selected cell.<\/li>\n<li><code>rowBindingContext<\/code> of type <code>sap.ui.model.Context<\/code>Row binding context of the selected cell.<\/li>\n<\/ul>","!type":"fn(mArguments?: Map) -> Boolean","!category":"function","!static":false},"getRowHeight":{"!description":"Gets current value of property <code>rowHeight<\/code>.\n\nHeight of a row of the Table in pixel.","!type":"fn() -> Number","!category":"function","!static":false},"getFixedRowCount":{"!description":"Gets current value of property <code>fixedRowCount<\/code>.\n\nNumber of rows that are fix on the top. When you use a vertical scroll bar, only the rows which are not fixed, will scroll.\n\nDefault value is <code>0<\/code>.","!type":"fn() -> Number","!category":"function","!static":false},"getEnableCellFilter":{"!description":"Gets current value of property <code>enableCellFilter<\/code>.\n\nFlag whether to enable or disable the context menu on cells to trigger a filtering with the cell value.\n\nDefault value is <code>false<\/code>.","!type":"fn() -> Boolean","!category":"function","!static":false},"destroyRows":{"!description":"Destroys all the rows in the aggregation <code>rows<\/code>.","!type":"fn() -> sap.ui.table.Table","!category":"function","!static":false},"extend":{"!description":"Creates a new subclass of class sap.ui.table.Table with name <code>sClassName<\/code>\nand enriches it with the information contained in <code>oClassInfo<\/code>.\n\n<code>oClassInfo<\/code> might contain the same kind of information as described in {@link sap.ui.core.Control.extend}.","!type":"fn(sClassName: String, oClassInfo?: Object, FNMetaImpl?: fn()) -> fn()","!category":"function","!static":true},"getGroupBy":{"!description":"ID of the element which is the current target of the association <code>groupBy<\/code>, or <code>null<\/code>.","!type":"fn() -> sap.ui.table.Column","!category":"function","!static":false},"detachColumnFreeze":{"!description":"Detaches event handler <code>fnFunction<\/code> from the <code>columnFreeze<\/code> event of this <code>sap.ui.table.Table<\/code>.\n\nThe passed function and listener object must match the ones used for event registration.","!type":"fn(fnFunction: fn(), oListener: Object) -> sap.ui.table.Table","!category":"function","!static":false},"getEnableSelectAll":{"!description":"Gets current value of property <code>enableSelectAll<\/code>.\n\nSpecifies if a select all button should be displayed in the top left corner. This button is only displayed\nif the row selector is visible and the selection mode is set to any kind of multi selection.\n\nDefault value is <code>true<\/code>.","!type":"fn() -> Boolean","!category":"function","!static":false},"attachFirstVisibleRowChanged":{"!description":"Attaches event handler <code>fnFunction<\/code> to the <code>firstVisibleRowChanged<\/code> event of this <code>sap.ui.table.Table<\/code>.\n\nWhen called, the context of the event handler (its <code>this<\/code>) will be bound to <code>oListener<\/code> if specified, \notherwise it will be bound to this <code>sap.ui.table.Table<\/code> itself.\n\nThis event gets fired when the first visible row is changed. It should only be used by composite controls.\nThe event even is fired when setFirstVisibleRow is called programmatically.","!type":"fn(oData?: Object, fnFunction: fn(), oListener?: Object) -> sap.ui.table.Table","!category":"function","!static":false},"fireColumnVisibility":{"!description":"Fires event <code>columnVisibility<\/code> to attached listeners.\n\nListeners may prevent the default action of this event by using the <code>preventDefault<\/code>-method on the event object.\n\nExpects the following event parameters:\n<ul>\n<li><code>column<\/code> of type <code>sap.ui.table.Column<\/code>affected column.<\/li>\n<li><code>visible<\/code> of type <code>boolean<\/code>new value of the visible property.<\/li>\n<\/ul>","!type":"fn(mArguments?: Map) -> Boolean","!category":"function","!static":false},"selectAll":{"!description":"Add all rows to the selection.\nPlease note that for server based models like OData the indices which are considered to be selected might not\nbe available at the client yet. Calling getContextByIndex might not return a result but trigger a roundtrip\nto request this single entity.","!type":"fn()","!category":"function","!static":false},"indexOfRow":{"!description":"Checks for the provided <code>sap.ui.table.Row<\/code> in the aggregation <code>rows<\/code>.\nand returns its index if found or -1 otherwise.","!type":"fn(oRow: sap.ui.table.Row) -> Number","!category":"function","!static":false},"fireColumnFreeze":{"!description":"Fires event <code>columnFreeze<\/code> to attached listeners.\n\nListeners may prevent the default action of this event by using the <code>preventDefault<\/code>-method on the event object.\n\nExpects the following event parameters:\n<ul>\n<li><code>column<\/code> of type <code>sap.ui.table.Column<\/code>reference to the column to freeze<\/li>\n<\/ul>","!type":"fn(mArguments?: Map) -> Boolean","!category":"function","!static":false},"getColumnHeaderHeight":{"!description":"Gets current value of property <code>columnHeaderHeight<\/code>.\n\nHeight of the column header of the Table in pixel.","!type":"fn() -> Number","!category":"function","!static":false},"attachColumnResize":{"!description":"Attaches event handler <code>fnFunction<\/code> to the <code>columnResize<\/code> event of this <code>sap.ui.table.Table<\/code>.\n\nWhen called, the context of the event handler (its <code>this<\/code>) will be bound to <code>oListener<\/code> if specified, \notherwise it will be bound to this <code>sap.ui.table.Table<\/code> itself.\n\nfired when a table column is resized.","!type":"fn(oData?: Object, fnFunction: fn(), oListener?: Object) -> sap.ui.table.Table","!category":"function","!static":false},"setMinAutoRowCount":{"!description":"Sets a new value for property <code>minAutoRowCount<\/code>.\n\nThis property is used to set the minimum count of visible rows when the property visibleRowCountMode is set to Auto or Interactive.\nFor any other visibleRowCountMode, it is ignored.\n\nWhen called with a value of <code>null<\/code> or <code>undefined<\/code>, the default value of the property will be restored.\n\nDefault value is <code>5<\/code>.","!type":"fn(iMinAutoRowCount: Number) -> sap.ui.table.Table","!category":"function","!static":false},"insertExtension":{"!description":"Inserts a extension into the aggregation <code>extension<\/code>.","!type":"fn(oExtension: sap.ui.core.Control, iIndex: Number) -> sap.ui.table.Table","!category":"function","!static":false},"setEnableCustomFilter":{"!description":"Sets a new value for property <code>enableCustomFilter<\/code>.\n\nSet this parameter to true to implement your own filter behaviour. Instead of the filter input box a button\nwill be rendered for which' press event (customFilter) you can register an event handler.\n\nWhen called with a value of <code>null<\/code> or <code>undefined<\/code>, the default value of the property will be restored.\n\nDefault value is <code>false<\/code>.","!type":"fn(bEnableCustomFilter: Boolean) -> sap.ui.table.Table","!category":"function","!static":false},"bindColumns":{"!description":"Binds aggregation <code>columns<\/code> to model data.\n\nSee {@link sap.ui.base.ManagedObject#bindAggregation ManagedObject.bindAggregation} for a \ndetailed description of the possible properties of <code>oBindingInfo<\/code>.","!type":"fn(oBindingInfo: Object) -> sap.ui.table.Table","!category":"function","!static":false},"getFirstVisibleRow":{"!description":"Gets current value of property <code>firstVisibleRow<\/code>.\n\nFirst visible row.\n\nDefault value is <code>0<\/code>.","!type":"fn() -> Number","!category":"function","!static":false}},"sap.ui.table.Row":{"indexOfCell":{"!description":"Checks for the provided <code>sap.ui.core.Control<\/code> in the aggregation <code>cells<\/code>.\nand returns its index if found or -1 otherwise.","!type":"fn(oCell: sap.ui.core.Control) -> Number","!category":"function","!static":false},"getCells":{"!description":"Gets content of aggregation <code>cells<\/code>.\n\nThe controls for the cells.","!type":"fn() -> [sap.ui.core.Control]","!category":"function","!static":false},"insertCell":{"!description":"Inserts a cell into the aggregation <code>cells<\/code>.","!type":"fn(oCell: sap.ui.core.Control, iIndex: Number) -> sap.ui.table.Row","!category":"function","!static":false},"destroyCells":{"!description":"Destroys all the cells in the aggregation <code>cells<\/code>.","!type":"fn() -> sap.ui.table.Row","!category":"function","!static":false},"extend":{"!description":"Creates a new subclass of class sap.ui.table.Row with name <code>sClassName<\/code>\nand enriches it with the information contained in <code>oClassInfo<\/code>.\n\n<code>oClassInfo<\/code> might contain the same kind of information as described in {@link sap.ui.core.Element.extend}.","!type":"fn(sClassName: String, oClassInfo?: Object, FNMetaImpl?: fn()) -> fn()","!category":"function","!static":true},"addCell":{"!description":"Adds some cell to the aggregation <code>cells<\/code>.","!type":"fn(oCell: sap.ui.core.Control) -> sap.ui.table.Row","!category":"function","!static":false},"getIndex":{"!description":"Returns the index of the row in the table or -1 if not added to a table. This\nfunction considers the scroll position of the table and also takes fixed rows and\nfixed bottom rows into account.","!type":"fn() -> Number","!category":"function","!static":false},"removeAllCells":{"!description":"Removes all the controls from the aggregation <code>cells<\/code>.\n\nAdditionally, it unregisters them from the hosting UIArea.","!type":"fn() -> [sap.ui.core.Control]","!category":"function","!static":false},"!constructorDescription":"Constructor for a new Row.\n\n\nAccepts an object literal <code>mSettings<\/code> that defines initial\nproperty values, aggregated and associated objects as well as event handlers.\nSee {@link sap.ui.base.ManagedObject#constructor} for a general description of the syntax of the settings object.\n\nThe supported settings are:\n<ul>\n<li>Aggregations\n<ul>\n<li>{@link #getCells cells} : sap.ui.core.Control[] (default)<\/li>\n<\/ul>\n<\/li>\n<\/ul>\n\nIn addition, all settings applicable to the base type {@link sap.ui.core.Element#constructor sap.ui.core.Element}\ncan be used as well.","!module":"sap/ui/table/Row","!description":"The row.","!category":"class","removeCell":{"!description":"Removes a cell from the aggregation <code>cells<\/code>.","!type":"fn(vCell: Number | String | sap.ui.core.Control) -> sap.ui.core.Control","!category":"function","!static":false},"!proto":"sap.ui.core.Element","getMetadata":{"!description":"Returns a metadata object for class sap.ui.table.Row.","!type":"fn() -> sap.ui.base.Metadata","!category":"function","!static":true}},"sap.ui.table.Table_obj":{"extend":{"!description":"Creates a new subclass of class sap.ui.table.Table with name <code>sClassName<\/code>\nand enriches it with the information contained in <code>oClassInfo<\/code>.\n\n<code>oClassInfo<\/code> might contain the same kind of information as described in {@link sap.ui.core.Control.extend}.","!type":"fn(sClassName: String, oClassInfo?: Object, FNMetaImpl?: fn()) -> fn()","!category":"function","!static":true},"!type":"fn(sId: String, mSettings: Object)","prototype":"sap.ui.table.Table"},"sap.ui.table.ColumnMenu_obj":{"extend":{"!description":"Creates a new subclass of class sap.ui.table.ColumnMenu with name <code>sClassName<\/code>\nand enriches it with the information contained in <code>oClassInfo<\/code>.\n\n<code>oClassInfo<\/code> might contain the same kind of information as described in {@link sap.ui.unified.Menu.extend}.","!type":"fn(sClassName: String, oClassInfo?: Object, FNMetaImpl?: fn()) -> fn()","!category":"function","!static":true},"!type":"fn(sId: String, mSettings: Object)","prototype":"sap.ui.table.ColumnMenu"},"sap.ui.table.AnalyticalColumnMenu":{"!description":"<strong style=\"color: red;\">Experimental! <\/strong>","extend":{"!description":"Creates a new subclass of class sap.ui.table.AnalyticalColumnMenu with name <code>sClassName<\/code>\nand enriches it with the information contained in <code>oClassInfo<\/code>.\n\n<code>oClassInfo<\/code> might contain the same kind of information as described in {@link sap.ui.table.ColumnMenu.extend}.","!type":"fn(sClassName: String, oClassInfo?: Object, FNMetaImpl?: fn()) -> fn()","!category":"function","!static":true},"!category":"class","!constructorDescription":"Constructor for a new AnalyticalColumnMenu.","!module":"sap/ui/table/AnalyticalColumnMenu","getMetadata":{"!description":"Returns a metadata object for class sap.ui.table.AnalyticalColumnMenu.","!type":"fn() -> sap.ui.base.Metadata","!category":"function","!static":true},"!proto":"sap.ui.table.ColumnMenu"},"sap.ui.table.Column_obj":{"extend":{"!description":"Creates a new subclass of class sap.ui.table.Column with name <code>sClassName<\/code>\nand enriches it with the information contained in <code>oClassInfo<\/code>.\n\n<code>oClassInfo<\/code> might contain the same kind of information as described in {@link sap.ui.core.Element.extend}.","!type":"fn(sClassName: String, oClassInfo?: Object, FNMetaImpl?: fn()) -> fn()","!category":"function","!static":true},"!type":"fn(sId: String, mSettings: Object)","prototype":"sap.ui.table.Column"},"sap.ui.table.SelectionMode":{"MultiToggle":{"!description":"Select multiple rows at a time (toggle behavior).","!type":"String","!category":"enum"},"Multi":{"!description":"<strong style=\"color: red;\">Deprecated! <\/strong>Since 1.38 replaced by {@link sap.ui.table.SelectionMode.MultiToggle}<br>Select multiple rows at a time.","!type":"String","!category":"enum"},"!description":"Selection mode of the table","!category":"static class","None":{"!description":"No rows can be selected.","!type":"String","!category":"enum"},"!module":"sap/ui/table/library","Single":{"!description":"Select one row at a time.","!type":"String","!category":"enum"}},"sap.ui.table.AnalyticalColumn_obj":{"extend":{"!description":"Creates a new subclass of class sap.ui.table.AnalyticalColumn with name <code>sClassName<\/code>\nand enriches it with the information contained in <code>oClassInfo<\/code>.\n\n<code>oClassInfo<\/code> might contain the same kind of information as described in {@link sap.ui.table.Column.extend}.","!type":"fn(sClassName: String, oClassInfo?: Object, FNMetaImpl?: fn()) -> fn()","!category":"function","!static":true},"!type":"fn(sId: String, mSettings: Object)","prototype":"sap.ui.table.AnalyticalColumn"},"sap.ui.table.Row_obj":{"extend":{"!description":"Creates a new subclass of class sap.ui.table.Row with name <code>sClassName<\/code>\nand enriches it with the information contained in <code>oClassInfo<\/code>.\n\n<code>oClassInfo<\/code> might contain the same kind of information as described in {@link sap.ui.core.Element.extend}.","!type":"fn(sClassName: String, oClassInfo?: Object, FNMetaImpl?: fn()) -> fn()","!category":"function","!static":true},"!type":"fn(sId: String, mSettings: Object)","prototype":"sap.ui.table.Row"},"sap":{"ui":"sap.ui","sap":"sap","!category":"namespace"},"sap.ui.table.TablePersoController":{"getAutoSave":{"!description":"Gets current value of property <code>autoSave<\/code>.\n\nAuto save state\n\nDefault value is <code>true<\/code>.","!type":"fn() -> Boolean","!category":"function","!static":false},"getTable":{"!description":"ID of the element which is the current target of the association <code>table<\/code>, or <code>null<\/code>.","!type":"fn() -> sap.ui.table.Table","!category":"function","!static":false},"extend":{"!description":"Creates a new subclass of class sap.ui.table.TablePersoController with name <code>sClassName<\/code>\nand enriches it with the information contained in <code>oClassInfo<\/code>.\n\n<code>oClassInfo<\/code> might contain the same kind of information as described in {@link sap.ui.base.ManagedObject.extend}.","!type":"fn(sClassName: String, oClassInfo?: Object, FNMetaImpl?: fn()) -> fn()","!category":"function","!static":true},"!constructorDescription":"Constructor for a new TablePersoController.\n\n\nAccepts an object literal <code>mSettings<\/code> that defines initial\nproperty values, aggregated and associated objects as well as event handlers.\nSee {@link sap.ui.base.ManagedObject#constructor} for a general description of the syntax of the settings object.\n\nThe supported settings are:\n<ul>\n<li>Properties\n<ul>\n<li>{@link #getAutoSave autoSave} : boolean (default: true)<\/li>\n<li>{@link #getPersoService persoService} : any<\/li>\n<li>{@link #getCustomDataKey customDataKey} : string (default: persoKey)<\/li>\n<\/ul>\n<\/li>\n<\/ul>\n\nIn addition, all settings applicable to the base type {@link sap.ui.base.ManagedObject#constructor sap.ui.base.ManagedObject}\ncan be used as well.","setTable":{"!description":"Sets the associated <code>table<\/code>.","!type":"fn(oTable: sap.ui.table.Table) -> sap.ui.table.TablePersoController","!category":"function","!static":false},"!module":"sap/ui/table/TablePersoController","setPersoService":{"!description":"Sets a new value for property <code>persoService<\/code>.\n\nPersonalization Service object. Needs to have the following methods:\n<ul>\n<li>getPersData() : <code>jQuery Promise<\/code> (http://api.jquery.com/promise/)<\/li>\n<li>setPersData(oBundle) : <code>jQuery Promise<\/code> (http://api.jquery.com/promise/)<\/li>\n<li>delPersData() : <code>jQuery Promise<\/code> (http://api.jquery.com/promise/)<\/li>\n<\/ul>\n\nWhen called with a value of <code>null<\/code> or <code>undefined<\/code>, the default value of the property will be restored.","!type":"fn(oPersoService: Object) -> sap.ui.table.TablePersoController","!category":"function","!static":false},"setCustomDataKey":{"!description":"Sets a new value for property <code>customDataKey<\/code>.\n\nBy defining a custom data key the <code>TablePersoController<\/code>\nwill try to get the key for saving the perso data from the custom\ndata of the Table and Column instead of creating it by concatenating\nthe ID of the Table and the Column. Basically this will be more stable\nthan using the auto IDs.\n\nWhen called with a value of <code>null<\/code> or <code>undefined<\/code>, the default value of the property will be restored.\n\nDefault value is <code>persoKey<\/code>.","!type":"fn(sCustomDataKey: String) -> sap.ui.table.TablePersoController","!category":"function","!static":false},"savePersonalizations":{"!description":"Saves the current personalization state.","!type":"fn() -> jQuery.Promise","!category":"function","!static":false},"setAutoSave":{"!description":"Sets a new value for property <code>autoSave<\/code>.\n\nAuto save state\n\nWhen called with a value of <code>null<\/code> or <code>undefined<\/code>, the default value of the property will be restored.\n\nDefault value is <code>true<\/code>.","!type":"fn(bAutoSave: Boolean) -> sap.ui.table.TablePersoController","!category":"function","!static":false},"!description":"The TablePersoController can be used to connect a table with a persistence service.","getPersoService":{"!description":"Gets current value of property <code>persoService<\/code>.\n\nPersonalization Service object. Needs to have the following methods:\n<ul>\n<li>getPersData() : <code>jQuery Promise<\/code> (http://api.jquery.com/promise/)<\/li>\n<li>setPersData(oBundle) : <code>jQuery Promise<\/code> (http://api.jquery.com/promise/)<\/li>\n<li>delPersData() : <code>jQuery Promise<\/code> (http://api.jquery.com/promise/)<\/li>\n<\/ul>","!type":"fn() -> Object","!category":"function","!static":false},"!category":"class","getCustomDataKey":{"!description":"Gets current value of property <code>customDataKey<\/code>.\n\nBy defining a custom data key the <code>TablePersoController<\/code>\nwill try to get the key for saving the perso data from the custom\ndata of the Table and Column instead of creating it by concatenating\nthe ID of the Table and the Column. Basically this will be more stable\nthan using the auto IDs.\n\nDefault value is <code>persoKey<\/code>.","!type":"fn() -> String","!category":"function","!static":false},"openDialog":{"!description":"<strong style=\"color: red;\">Experimental! <\/strong>","!type":"fn(mSettings: Object)","!category":"function","!static":false},"refresh":{"!description":"Refresh the personalizations (reloads data from service).","!type":"fn() -> jQuery.Promise","!category":"function","!static":false},"!proto":"sap.ui.base.ManagedObject","getMetadata":{"!description":"Returns a metadata object for class sap.ui.table.TablePersoController.","!type":"fn() -> sap.ui.base.Metadata","!category":"function","!static":true}},"sap.ui.table.AnalyticalColumnMenu_obj":{"extend":{"!description":"Creates a new subclass of class sap.ui.table.AnalyticalColumnMenu with name <code>sClassName<\/code>\nand enriches it with the information contained in <code>oClassInfo<\/code>.\n\n<code>oClassInfo<\/code> might contain the same kind of information as described in {@link sap.ui.table.ColumnMenu.extend}.","!type":"fn(sClassName: String, oClassInfo?: Object, FNMetaImpl?: fn()) -> fn()","!category":"function","!static":true},"!type":"fn(sId: String, mSettings: Object)","prototype":"sap.ui.table.AnalyticalColumnMenu"},"sap.ui.table.TreeTable_obj":{"extend":{"!description":"Creates a new subclass of class sap.ui.table.TreeTable with name <code>sClassName<\/code>\nand enriches it with the information contained in <code>oClassInfo<\/code>.\n\n<code>oClassInfo<\/code> might contain the same kind of information as described in {@link sap.ui.table.Table.extend}.","!type":"fn(sClassName: String, oClassInfo?: Object, FNMetaImpl?: fn()) -> fn()","!category":"function","!static":true},"!type":"fn(sId: String, mSettings: Object)","prototype":"sap.ui.table.TreeTable"},"sap.ui.table.VisibleRowCountMode":{"!description":"VisibleRowCountMode of the table","Interactive":{"!description":"After rendering the table has as many rows as defined in visibleRowCount property. The user is able to change the visible rows by moving a grip with the mouse. The visibleRowCount property is changed accordingly.","!type":"String","!category":"enum"},"Auto":{"!description":"The table automatically fills the height of the surrounding container.\nThe visibleRowCount property is automatically changed accordingly.\nAll rows need the same height, otherwise the auto mode doesn't always work as expected.\nThe height of all siblings within the same layout container of the table will be subtracted from the available height.\nFor performance reasons, it is recommended to add no siblings in the table's parent container.","!type":"String","!category":"enum"},"!category":"static class","!module":"sap/ui/table/library","Fixed":{"!description":"The table always has as many rows as defined in the visibleRowCount property.","!type":"String","!category":"enum"}}},"!name":"sap.ui.table","!version":"1.10.0"}